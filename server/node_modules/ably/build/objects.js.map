{
  "version": 3,
  "sources": ["../src/plugins/objects/index.ts", "../src/plugins/objects/objectmessage.ts", "../src/plugins/objects/liveobject.ts", "../src/plugins/objects/objectid.ts", "../src/plugins/objects/livecounter.ts", "../src/plugins/objects/batchcontextlivecounter.ts", "../src/plugins/objects/livemap.ts", "../src/plugins/objects/batchcontextlivemap.ts", "../src/plugins/objects/defaults.ts", "../src/plugins/objects/objectspool.ts", "../src/plugins/objects/batchcontext.ts", "../src/plugins/objects/syncobjectsdatapool.ts", "../src/plugins/objects/objects.ts"],
  "sourcesContent": ["import { ObjectMessage, WireObjectMessage } from './objectmessage';\nimport { Objects } from './objects';\n\nexport { Objects, ObjectMessage, WireObjectMessage };\n\nexport default {\n  Objects,\n  ObjectMessage,\n  WireObjectMessage,\n};\n", "import type BaseClient from 'common/lib/client/baseclient';\nimport type { MessageEncoding } from 'common/lib/types/basemessage';\nimport type * as Utils from 'common/lib/util/utils';\nimport type { Bufferlike } from 'common/platform';\nimport type { JsonArray, JsonObject } from '../../../ably';\n\nexport type EncodeObjectDataFunction = (data: ObjectData | WireObjectData) => WireObjectData;\n\n/** @spec OOP2 */\nexport enum ObjectOperationAction {\n  MAP_CREATE = 0,\n  MAP_SET = 1,\n  MAP_REMOVE = 2,\n  COUNTER_CREATE = 3,\n  COUNTER_INC = 4,\n  OBJECT_DELETE = 5,\n}\n\n/** @spec OMP2 */\nexport enum ObjectsMapSemantics {\n  LWW = 0,\n}\n\nexport type PrimitiveObjectValue = string | number | boolean | Bufferlike | JsonArray | JsonObject;\n\n/**\n * An ObjectData represents a value in an object on a channel decoded from {@link WireObjectData}.\n * @spec OD1\n */\nexport interface ObjectData {\n  /** A reference to another object, used to support composable object structures. */\n  objectId?: string; // OD2a\n  /** A decoded leaf value from {@link WireObjectData}. */\n  value?: PrimitiveObjectValue;\n}\n\n/**\n * A WireObjectData represents a value in an object on a channel received from the server.\n * @spec OD1\n */\nexport interface WireObjectData {\n  /** A reference to another object, used to support composable object structures. */\n  objectId?: string; // OD2a\n\n  /** A primitive boolean leaf value in the object graph. Only one value field can be set. */\n  boolean?: boolean; // OD2c\n  /** A primitive binary leaf value in the object graph. Only one value field can be set. Represented as a Base64-encoded string in JSON protocol */\n  bytes?: Bufferlike | string; // OD2d\n  /** A primitive number leaf value in the object graph. Only one value field can be set. */\n  number?: number; // OD2e\n  /** A primitive string leaf value in the object graph. Only one value field can be set. */\n  string?: string; // OD2f\n  /** A primitive JSON-encoded string leaf value in the object graph. Only one value field can be set. */\n  json?: string; // OD2g\n}\n\n/**\n * An ObjectsMapOp describes an operation to be applied to a Map object.\n * @spec OMO1\n */\nexport interface ObjectsMapOp<TData> {\n  /** The key of the map entry to which the operation should be applied. */\n  key: string; // OMO2a\n  /** The data that the map entry should contain if the operation is a MAP_SET operation. */\n  data?: TData; // OMO2b\n}\n\n/**\n * An ObjectsCounterOp describes an operation to be applied to a Counter object.\n * @spec OCO1\n */\nexport interface ObjectsCounterOp {\n  /** The data value that should be added to the counter */\n  amount: number; // OCO2a\n}\n\n/**\n * An ObjectsMapEntry represents the value at a given key in a Map object.\n * @spec OME1\n */\nexport interface ObjectsMapEntry<TData> {\n  /** Indicates whether the map entry has been removed. */\n  tombstone?: boolean; // OME2a\n  /**\n   * The {@link ObjectMessage.serial} value of the last operation that was applied to the map entry.\n   *\n   * It is optional in a MAP_CREATE operation and might be missing, in which case the client should use a nullish value for it\n   * and treat it as the \"earliest possible\" serial for comparison purposes.\n   */\n  timeserial?: string; // OME2b\n  /** A timestamp from the {@link timeserial} field. Only present if {@link tombstone} is `true` */\n  serialTimestamp?: number; // OME2d\n  /** The data that represents the value of the map entry. */\n  data?: TData; // OME2c\n}\n\n/**\n * An ObjectsMap object represents a map of key-value pairs.\n * @spec OMP1\n */\nexport interface ObjectsMap<TData> {\n  /** The conflict-resolution semantics used by the map object. */\n  semantics?: ObjectsMapSemantics; // OMP3a\n  // The map entries, indexed by key.\n  entries?: Record<string, ObjectsMapEntry<TData>>; // OMP3b\n}\n\n/**\n * An ObjectsCounter object represents an incrementable and decrementable value\n * @spec OCN1\n */\nexport interface ObjectsCounter {\n  /** The value of the counter */\n  count?: number; // OCN2a\n}\n\n/**\n * An ObjectOperation describes an operation to be applied to an object on a channel.\n * @spec OOP1\n */\nexport interface ObjectOperation<TData> {\n  /** Defines the operation to be applied to the object. */\n  action: ObjectOperationAction; // OOP3a\n  /** The object ID of the object on a channel to which the operation should be applied. */\n  objectId: string; // OOP3b\n  /** The payload for the operation if it is an operation on a Map object type. */\n  mapOp?: ObjectsMapOp<TData>; // OOP3c\n  /** The payload for the operation if it is an operation on a Counter object type. */\n  counterOp?: ObjectsCounterOp; // OOP3d\n  /**\n   * The payload for the operation if the operation is MAP_CREATE.\n   * Defines the initial value for the Map object.\n   */\n  map?: ObjectsMap<TData>; // OOP3e\n  /**\n   * The payload for the operation if the operation is COUNTER_CREATE.\n   * Defines the initial value for the Counter object.\n   */\n  counter?: ObjectsCounter; // OOP3f\n  /**\n   * The nonce, must be present on create operations. This is the random part\n   * that has been hashed with the type and initial value to create the object ID.\n   */\n  nonce?: string; // OOP3g\n  /**\n   * The initial value of the object, represented as a JSON string.\n   * Used along with the nonce and timestamp to create the object ID.\n   *\n   * This field must be set by the client for MAP_CREATE and COUNTER_CREATE operations.\n   * The server uses it to verify the object ID, and after verification, the JSON string\n   * is decoded into the initial value for new Map or Counter objects.\n   *\n   * This field must not be read by the client if received from the server.\n   */\n  initialValue?: string; // OOP3h\n}\n\n/**\n * An ObjectState describes the instantaneous state of an object on a channel.\n * @spec OST1\n */\nexport interface ObjectState<TData> {\n  /** The identifier of the object. */\n  objectId: string; // OST2a\n  /** A map of serials keyed by a {@link ObjectMessage.siteCode}, representing the last operations applied to this object */\n  siteTimeserials: Record<string, string>; // OST2b\n  /** True if the object has been tombstoned. */\n  tombstone: boolean; // OST2c\n  /**\n   * The operation that created the object.\n   *\n   * Can be missing if create operation for the object is not known at this point.\n   */\n  createOp?: ObjectOperation<TData>; // OST2d\n  /**\n   * The data that represents the result of applying all operations to a Map object\n   * excluding the initial value from the create operation if it is a Map object type.\n   */\n  map?: ObjectsMap<TData>; // OST2e\n  /**\n   * The data that represents the result of applying all operations to a Counter object\n   * excluding the initial value from the create operation if it is a Counter object type.\n   */\n  counter?: ObjectsCounter; // OST2f\n}\n\nfunction encode(\n  message: Utils.Properties<ObjectMessage> | Utils.Properties<WireObjectMessage>,\n  utils: typeof Utils,\n  messageEncoding: typeof MessageEncoding,\n  encodeObjectDataFn: EncodeObjectDataFunction,\n): WireObjectMessage {\n  // deep copy the message to avoid mutating the original one.\n  // buffer values won't be correctly copied, so we will need to use the original message when encoding.\n  const result = Object.assign(new WireObjectMessage(utils, messageEncoding), copyMsg(message));\n\n  // encode \"object\" field\n  if (message.object?.map?.entries) {\n    result.object!.map!.entries = encodeMapEntries(message.object.map.entries, encodeObjectDataFn);\n  }\n\n  if (message.object?.createOp?.map?.entries) {\n    result.object!.createOp!.map!.entries = encodeMapEntries(message.object.createOp.map.entries, encodeObjectDataFn);\n  }\n\n  if (message.object?.createOp?.mapOp?.data) {\n    result.object!.createOp!.mapOp!.data = encodeObjectData(message.object.createOp.mapOp.data, encodeObjectDataFn);\n  }\n\n  // OOP5\n  // encode \"operation\" field\n  if (message.operation?.map?.entries) {\n    result.operation!.map!.entries = encodeMapEntries(message.operation.map.entries, encodeObjectDataFn);\n  }\n\n  if (message.operation?.mapOp?.data) {\n    result.operation!.mapOp!.data = encodeObjectData(message.operation.mapOp.data, encodeObjectDataFn);\n  }\n\n  return result;\n}\n\nfunction encodeMapEntries(\n  mapEntries: Record<string, ObjectsMapEntry<ObjectData | WireObjectData>>,\n  encodeFn: EncodeObjectDataFunction,\n): Record<string, ObjectsMapEntry<WireObjectData>> {\n  return Object.entries(mapEntries).reduce(\n    (acc, v) => {\n      const [key, entry] = v;\n      const encodedData = entry.data ? encodeObjectData(entry.data, encodeFn) : undefined;\n      acc[key] = {\n        ...entry,\n        data: encodedData,\n      };\n      return acc;\n    },\n    {} as Record<string, ObjectsMapEntry<WireObjectData>>,\n  );\n}\n\n/** @spec OD4 */\nfunction encodeObjectData(data: ObjectData | WireObjectData, encodeFn: EncodeObjectDataFunction): WireObjectData {\n  const encodedData = encodeFn(data);\n  return encodedData;\n}\n\n/**\n * Used to create an {@link ObjectOperation.initialValue} JSON string for *_CREATE operations,\n * based on the object operation message that contains the initial value for the object.\n */\nexport function createInitialValueJSONString(\n  operation: Partial<ObjectOperation<ObjectData>>,\n  client: BaseClient,\n): string {\n  // the object operation may contain user-provided data that requires encoding.\n  // for example, buffers must be encoded since the initial value will be represented as a JSON string.\n  // we can use ObjectMessage methods to encode the object operation.\n  const msg = ObjectMessage.fromValues(\n    // cast initialValue to ObjectOperation here, even though it may lack some properties\n    // that are usually present on ObjectOperation.\n    // this ObjectMessage instance is only used to get the encoded body,\n    // so it's ok for the operation field to be incomplete in this context.\n    // doing the type assertion here avoids the need to define a separate ObjectMessage\n    // type that supports a fully optional ObjectOperation.\n    { operation: operation as ObjectOperation<ObjectData> },\n    client.Utils,\n    client.MessageEncoding,\n  );\n  const wireMsg = msg.encode(client);\n\n  // get the encoded operation that is safe to be sent over the wire as a JSON string.\n  const { operation: encodedOperation } = wireMsg.encodeForWire(client.Utils.Format.json);\n\n  // finally, initialValue is the JSON string representation of the encoded operation.\n  return JSON.stringify(encodedOperation);\n}\n\nfunction strMsg(msg: any, className: string) {\n  let result = '[' + className;\n\n  for (const attr in msg) {\n    if (msg[attr] === undefined || attr === '_utils' || attr === '_messageEncoding') {\n      continue;\n    }\n\n    if (attr === 'operation' || attr === 'object' || attr === 'extras') {\n      result += `; ${attr}=${JSON.stringify(msg[attr])}`;\n    } else {\n      result += `; ${attr}=${msg[attr]}`;\n    }\n  }\n\n  result += ']';\n  return result;\n}\n\n/**\n * Deep copy public properties of an object message, using `JSON.parse(JSON.stringify(object))` for nested object fields like `operation` and `object`.\n *\n * Important: Buffer instances are not copied correctly using `JSON.parse(JSON.stringify(object))`, as they lose their type and become plain objects.\n * If you need access to the original Buffer values, use the original message instance instead.\n */\n\nfunction copyMsg(\n  msg: Utils.Properties<ObjectMessage | WireObjectMessage>,\n): Utils.Properties<ObjectMessage | WireObjectMessage> {\n  const result: Utils.Properties<ObjectMessage | WireObjectMessage> = {\n    id: msg.id,\n    clientId: msg.clientId,\n    connectionId: msg.connectionId,\n    timestamp: msg.timestamp,\n    serial: msg.serial,\n    serialTimestamp: msg.serialTimestamp,\n    siteCode: msg.siteCode,\n  };\n\n  if (msg.operation) {\n    result.operation = JSON.parse(JSON.stringify(msg.operation));\n  }\n  if (msg.object) {\n    result.object = JSON.parse(JSON.stringify(msg.object));\n  }\n  if (msg.extras) {\n    result.extras = JSON.parse(JSON.stringify(msg.extras));\n  }\n\n  return result;\n}\n\n/**\n * A decoded {@link WireObjectMessage} message\n * @spec OM1\n * @internal\n */\nexport class ObjectMessage {\n  id?: string; // OM2a\n  clientId?: string; // OM2b\n  connectionId?: string; // OM2c\n  extras?: any; // OM2d\n  timestamp?: number; // OM2e\n  /**\n   * Describes an operation to be applied to an object.\n   *\n   * Mutually exclusive with the `object` field. This field is only set on object messages if the `action` field of the `ProtocolMessage` encapsulating it is `OBJECT`.\n   */\n  operation?: ObjectOperation<ObjectData>; // OM2f\n  /**\n   * Describes the instantaneous state of an object.\n   *\n   * Mutually exclusive with the `operation` field. This field is only set on object messages if the `action` field of the `ProtocolMessage` encapsulating it is `OBJECT_SYNC`.\n   */\n  object?: ObjectState<ObjectData>; // OM2g\n  /** An opaque string that uniquely identifies this object message. */\n  serial?: string; // OM2h\n  /** A timestamp from the {@link serial} field. */\n  serialTimestamp?: number; // OM2j\n  /** An opaque string used as a key to update the map of serial values on an object. */\n  siteCode?: string; // OM2i\n\n  constructor(\n    private _utils: typeof Utils,\n    private _messageEncoding: typeof MessageEncoding,\n  ) {}\n\n  static fromValues(\n    values: Utils.Properties<ObjectMessage>,\n    utils: typeof Utils,\n    messageEncoding: typeof MessageEncoding,\n  ): ObjectMessage {\n    return Object.assign(new ObjectMessage(utils, messageEncoding), values);\n  }\n\n  static fromValuesArray(\n    values: Utils.Properties<ObjectMessage>[],\n    utils: typeof Utils,\n    messageEncoding: typeof MessageEncoding,\n  ): ObjectMessage[] {\n    return values.map((x) => ObjectMessage.fromValues(x, utils, messageEncoding));\n  }\n\n  /**\n   * Protocol agnostic encoding of this ObjectMessage. Returns a new {@link WireObjectMessage} instance.\n   *\n   * Uses encoding functions from regular `Message` processing.\n   *\n   * @spec OM4\n   */\n  encode(client: BaseClient): WireObjectMessage {\n    const encodeObjectDataFn: EncodeObjectDataFunction = (data: ObjectData) => {\n      const encodedObjectData: WireObjectData = { objectId: data.objectId };\n\n      if (client.Platform.BufferUtils.isBuffer(data.value)) {\n        // bytes encoding happens later when WireObjectMessage is encoded for wire transmission\n        encodedObjectData.bytes = data.value;\n      } else if (typeof data.value === 'string') {\n        encodedObjectData.string = data.value; // OD4c4, OD4d4\n      } else if (typeof data.value === 'boolean') {\n        encodedObjectData.boolean = data.value; // OD4c1, OD4d1\n      } else if (typeof data.value === 'number') {\n        encodedObjectData.number = data.value; // OD4c3, OD4d3\n      } else if (typeof data.value === 'object' && data.value !== null) {\n        // OD4c5, OD4d5\n        encodedObjectData.json = JSON.stringify(data.value);\n      }\n\n      return encodedObjectData;\n    };\n\n    return encode(this, this._utils, this._messageEncoding, encodeObjectDataFn);\n  }\n\n  toString(): string {\n    return strMsg(this, 'ObjectMessage');\n  }\n}\n\n/**\n * An individual object message to be sent or received via the Ably Realtime service.\n * @spec OM1\n * @internal\n */\nexport class WireObjectMessage {\n  id?: string; // OM2a\n  clientId?: string; // OM2b\n  connectionId?: string; // OM2c\n  extras?: any; // OM2d\n  timestamp?: number; // OM2e\n  /**\n   * Describes an operation to be applied to an object.\n   *\n   * Mutually exclusive with the `object` field. This field is only set on object messages if the `action` field of the `ProtocolMessage` encapsulating it is `OBJECT`.\n   */\n  operation?: ObjectOperation<WireObjectData>; // OM2f\n  /**\n   * Describes the instantaneous state of an object.\n   *\n   * Mutually exclusive with the `operation` field. This field is only set on object messages if the `action` field of the `ProtocolMessage` encapsulating it is `OBJECT_SYNC`.\n   */\n  object?: ObjectState<WireObjectData>; // OM2g\n  /** An opaque string that uniquely identifies this object message. */\n  serial?: string; // OM2h\n  /** A timestamp from the {@link serial} field. */\n  serialTimestamp?: number; // OM2j\n  /** An opaque string used as a key to update the map of serial values on an object. */\n  siteCode?: string; // OM2i\n\n  constructor(\n    private _utils: typeof Utils,\n    private _messageEncoding: typeof MessageEncoding,\n  ) {}\n\n  static fromValues(\n    values: Utils.Properties<WireObjectMessage>,\n    utils: typeof Utils,\n    messageEncoding: typeof MessageEncoding,\n  ): WireObjectMessage {\n    return Object.assign(new WireObjectMessage(utils, messageEncoding), values);\n  }\n\n  static fromValuesArray(\n    values: Utils.Properties<WireObjectMessage>[],\n    utils: typeof Utils,\n    messageEncoding: typeof MessageEncoding,\n  ): WireObjectMessage[] {\n    return values.map((x) => WireObjectMessage.fromValues(x, utils, messageEncoding));\n  }\n\n  /**\n   * Encodes WireObjectMessage for wire transmission. Does not mutate the provided WireObjectMessage.\n   *\n   * Uses encoding functions from regular `Message` processing.\n   */\n  encodeForWire(format: Utils.Format): WireObjectMessage {\n    const encodeObjectDataFn: EncodeObjectDataFunction = (data: WireObjectData) => {\n      if (data.bytes != null) {\n        // OD4c2, OD4d2\n        const result = this._messageEncoding.encodeDataForWire(data.bytes, null, format);\n        // no need to set the encoding\n        return { ...data, bytes: result.data };\n      }\n\n      return { ...data };\n    };\n\n    return encode(this, this._utils, this._messageEncoding, encodeObjectDataFn);\n  }\n\n  /**\n   * Decodes this WireObjectMessage and returns a new {@link ObjectMessage} instance.\n   *\n   * Format is used to decode the bytes value as it's implicitly encoded depending on the protocol used:\n   * - json: bytes are Base64-encoded string\n   * - msgpack: bytes have a binary representation and don't need to be decoded\n   *\n   * @spec OM5\n   */\n  decode(client: BaseClient, format: Utils.Format | undefined): ObjectMessage {\n    // deep copy the message to avoid mutating the original one.\n    // buffer values won't be correctly copied, so we will need to use the original message when decoding.\n    const result = Object.assign(new ObjectMessage(this._utils, this._messageEncoding), copyMsg(this));\n\n    try {\n      // decode \"object\" field\n      if (this.object?.map?.entries) {\n        result.object!.map!.entries = this._decodeMapEntries(this.object.map.entries, client, format);\n      }\n\n      if (this.object?.createOp?.map?.entries) {\n        result.object!.createOp!.map!.entries = this._decodeMapEntries(\n          this.object.createOp.map.entries,\n          client,\n          format,\n        );\n      }\n\n      if (this.object?.createOp?.mapOp?.data) {\n        result.object!.createOp!.mapOp!.data = this._decodeObjectData(this.object.createOp.mapOp.data, client, format);\n      }\n\n      // decode \"operation\" field\n      if (this.operation?.map?.entries) {\n        result.operation!.map!.entries = this._decodeMapEntries(this.operation.map.entries, client, format);\n      }\n\n      if (this.operation?.mapOp?.data) {\n        result.operation!.mapOp!.data = this._decodeObjectData(this.operation.mapOp.data, client, format);\n      }\n    } catch (error) {\n      client.Logger.logAction(\n        client.logger,\n        client.Logger.LOG_ERROR,\n        'WireObjectMessage.decode()',\n        this._utils.inspectError(error),\n      );\n    }\n\n    return result;\n  }\n\n  /**\n   * Overload toJSON() to intercept JSON.stringify().\n   *\n   * This will prepare the message to be transmitted over the wire to Ably.\n   * It will encode the data payload according to the wire protocol used on the client.\n   */\n  toJSON() {\n    // we can infer the format used by client by inspecting with what arguments this method was called.\n    // if JSON protocol is being used, the JSON.stringify() will be called and this toJSON() method will have a non-empty arguments list.\n    // MSGPack protocol implementation also calls toJSON(), but with an empty arguments list.\n    const format = arguments.length > 0 ? this._utils.Format.json : this._utils.Format.msgpack;\n    const { _utils, _messageEncoding, ...publicProps } = this.encodeForWire(format);\n    return publicProps;\n  }\n\n  toString(): string {\n    return strMsg(this, 'WireObjectMessage');\n  }\n\n  /** @spec OM3 */\n  getMessageSize(): number {\n    let size = 0;\n\n    // OM3a\n    size += this.clientId?.length ?? 0; // OM3f\n    if (this.operation) {\n      size += this._getObjectOperationSize(this.operation); // OM3b\n    }\n    if (this.object) {\n      size += this._getObjectStateSize(this.object); // OM3c\n    }\n    if (this.extras) {\n      size += JSON.stringify(this.extras).length; // OM3d\n    }\n\n    return size;\n  }\n\n  /** @spec OOP4 */\n  private _getObjectOperationSize(operation: ObjectOperation<WireObjectData>): number {\n    let size = 0;\n\n    // OOP4a\n    if (operation.mapOp) {\n      size += this._getMapOpSize(operation.mapOp); // OOP4b\n    }\n    if (operation.counterOp) {\n      size += this._getCounterOpSize(operation.counterOp); // OOP4c\n    }\n    if (operation.map) {\n      size += this._getObjectMapSize(operation.map); // OOP4d\n    }\n    if (operation.counter) {\n      size += this._getObjectCounterSize(operation.counter); // OOP4e\n    }\n\n    return size;\n  }\n\n  /** @spec OST3 */\n  private _getObjectStateSize(obj: ObjectState<WireObjectData>): number {\n    let size = 0;\n\n    // OST3a\n    if (obj.map) {\n      size += this._getObjectMapSize(obj.map); // OST3b\n    }\n    if (obj.counter) {\n      size += this._getObjectCounterSize(obj.counter); // OST3c\n    }\n    if (obj.createOp) {\n      size += this._getObjectOperationSize(obj.createOp); // OST3d\n    }\n\n    return size;\n  }\n\n  /** @spec OMP4 */\n  private _getObjectMapSize(map: ObjectsMap<WireObjectData>): number {\n    let size = 0;\n\n    // OMP4a\n    Object.entries(map.entries ?? {}).forEach(([key, entry]) => {\n      size += key?.length ?? 0; // OMP4a1\n      if (entry) {\n        size += this._getMapEntrySize(entry); // OMP4a2\n      }\n    });\n\n    return size;\n  }\n\n  /** @spec OCN3 */\n  private _getObjectCounterSize(counter: ObjectsCounter): number {\n    // OCN3b\n    if (counter.count == null) {\n      return 0;\n    }\n\n    // OCN3a\n    return 8;\n  }\n\n  /** @spec OME3 */\n  private _getMapEntrySize(entry: ObjectsMapEntry<WireObjectData>): number {\n    let size = 0;\n\n    // OME3a\n    if (entry.data) {\n      size += this._getObjectDataSize(entry.data); // OME3b\n    }\n\n    return size;\n  }\n\n  /** @spec OMO3 */\n  private _getMapOpSize(mapOp: ObjectsMapOp<WireObjectData>): number {\n    let size = 0;\n\n    // OMO3a\n    size += mapOp.key?.length ?? 0; // OMO3d\n    if (mapOp.data) {\n      size += this._getObjectDataSize(mapOp.data); // OMO3b\n    }\n\n    return size;\n  }\n\n  /** @spec OCO3 */\n  private _getCounterOpSize(operation: ObjectsCounterOp): number {\n    // OCO3b\n    if (operation.amount == null) {\n      return 0;\n    }\n\n    // OCO3a\n    return 8;\n  }\n\n  /** @spec OD3 */\n  private _getObjectDataSize(data: WireObjectData): number {\n    let size = 0;\n\n    // OD3a\n    if (data.boolean != null) {\n      size += this._utils.dataSizeBytes(data.boolean); // OD3b\n    }\n    if (data.bytes != null) {\n      size += this._utils.dataSizeBytes(data.bytes); // OD3c\n    }\n    if (data.number != null) {\n      size += this._utils.dataSizeBytes(data.number); // OD3d\n    }\n    if (data.string != null) {\n      size += this._utils.dataSizeBytes(data.string); // OD3e\n    }\n    if (data.json != null) {\n      size += this._utils.dataSizeBytes(data.json);\n    }\n\n    return size;\n  }\n\n  private _decodeMapEntries(\n    mapEntries: Record<string, ObjectsMapEntry<WireObjectData>>,\n    client: BaseClient,\n    format: Utils.Format | undefined,\n  ): Record<string, ObjectsMapEntry<ObjectData>> {\n    return Object.entries(mapEntries).reduce(\n      (acc, v) => {\n        const [key, entry] = v;\n        const decodedData = entry.data ? this._decodeObjectData(entry.data, client, format) : undefined;\n        acc[key] = {\n          ...entry,\n          data: decodedData,\n        };\n        return acc;\n      },\n      {} as Record<string, ObjectsMapEntry<ObjectData>>,\n    );\n  }\n\n  /** @spec OD5 */\n  private _decodeObjectData(\n    objectData: WireObjectData,\n    client: BaseClient,\n    format: Utils.Format | undefined,\n  ): ObjectData {\n    try {\n      let decodedBytes: Bufferlike | undefined;\n      if (objectData.bytes != null) {\n        decodedBytes =\n          format === 'msgpack'\n            ? // OD5a1 - connection is using msgpack protocol, bytes are already a buffer\n              (objectData.bytes as Bufferlike)\n            : // OD5b2 - connection is using JSON protocol, Base64-decode bytes value\n              client.Platform.BufferUtils.base64Decode(String(objectData.bytes));\n      }\n\n      let decodedJson: JsonObject | JsonArray | undefined;\n      if (objectData.json != null) {\n        decodedJson = JSON.parse(objectData.json); // OD5a2, OD5b3\n      }\n\n      return {\n        objectId: objectData.objectId,\n        value: decodedBytes ?? decodedJson ?? objectData.boolean ?? objectData.number ?? objectData.string,\n      };\n    } catch (error) {\n      client.Logger.logAction(\n        client.logger,\n        client.Logger.LOG_ERROR,\n        'WireObjectMessage._decodeObjectData()',\n        this._utils.inspectError(error),\n      );\n      // object data decoding has failed, return the data as is.\n      return {\n        ...objectData,\n      } as ObjectData;\n    }\n  }\n}\n", "import type BaseClient from 'common/lib/client/baseclient';\nimport type EventEmitter from 'common/lib/util/eventemitter';\nimport { ObjectData, ObjectMessage, ObjectOperation } from './objectmessage';\nimport { Objects } from './objects';\n\nexport enum LiveObjectSubscriptionEvent {\n  updated = 'updated',\n}\n\nexport interface LiveObjectData {\n  data: any;\n}\n\nexport interface LiveObjectUpdate {\n  update: any;\n  clientId?: string;\n  connectionId?: string;\n}\n\nexport interface LiveObjectUpdateNoop {\n  // have optional update field with undefined type so it's not possible to create a noop object with a meaningful update property.\n  update?: undefined;\n  noop: true;\n}\n\nexport interface SubscribeResponse {\n  unsubscribe(): void;\n}\n\nexport enum LiveObjectLifecycleEvent {\n  deleted = 'deleted',\n}\n\nexport type LiveObjectLifecycleEventCallback = () => void;\n\nexport interface OnLiveObjectLifecycleEventResponse {\n  off(): void;\n}\n\nexport abstract class LiveObject<\n  TData extends LiveObjectData = LiveObjectData,\n  TUpdate extends LiveObjectUpdate = LiveObjectUpdate,\n> {\n  protected _client: BaseClient;\n  protected _subscriptions: EventEmitter;\n  protected _lifecycleEvents: EventEmitter;\n  protected _objectId: string;\n  /**\n   * Represents an aggregated value for an object, which combines the initial value for an object from the create operation,\n   * and all object operations applied to the object.\n   */\n  protected _dataRef: TData;\n  protected _siteTimeserials: Record<string, string>;\n  protected _createOperationIsMerged: boolean;\n  private _tombstone: boolean;\n  private _tombstonedAt: number | undefined;\n\n  protected constructor(\n    protected _objects: Objects,\n    objectId: string,\n  ) {\n    this._client = this._objects.getClient();\n    this._subscriptions = new this._client.EventEmitter(this._client.logger);\n    this._lifecycleEvents = new this._client.EventEmitter(this._client.logger);\n    this._objectId = objectId;\n    this._dataRef = this._getZeroValueData();\n    // use empty map of serials by default, so any future operation can be applied to this object\n    this._siteTimeserials = {};\n    this._createOperationIsMerged = false;\n    this._tombstone = false;\n  }\n\n  subscribe(listener: (update: TUpdate) => void): SubscribeResponse {\n    this._objects.throwIfInvalidAccessApiConfiguration();\n\n    this._subscriptions.on(LiveObjectSubscriptionEvent.updated, listener);\n\n    const unsubscribe = () => {\n      this._subscriptions.off(LiveObjectSubscriptionEvent.updated, listener);\n    };\n\n    return { unsubscribe };\n  }\n\n  unsubscribe(listener: (update: TUpdate) => void): void {\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\n\n    // current implementation of the EventEmitter will remove all listeners if .off is called without arguments or with nullish arguments.\n    // or when called with just an event argument, it will remove all listeners for the event.\n    // thus we need to check that listener does actually exist before calling .off.\n    if (this._client.Utils.isNil(listener)) {\n      return;\n    }\n\n    this._subscriptions.off(LiveObjectSubscriptionEvent.updated, listener);\n  }\n\n  unsubscribeAll(): void {\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\n    this._subscriptions.off(LiveObjectSubscriptionEvent.updated);\n  }\n\n  on(event: LiveObjectLifecycleEvent, callback: LiveObjectLifecycleEventCallback): OnLiveObjectLifecycleEventResponse {\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\n    this._lifecycleEvents.on(event, callback);\n\n    const off = () => {\n      this._lifecycleEvents.off(event, callback);\n    };\n\n    return { off };\n  }\n\n  off(event: LiveObjectLifecycleEvent, callback: LiveObjectLifecycleEventCallback): void {\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\n\n    // prevent accidentally calling .off without any arguments on an EventEmitter and removing all callbacks\n    if (this._client.Utils.isNil(event) && this._client.Utils.isNil(callback)) {\n      return;\n    }\n\n    this._lifecycleEvents.off(event, callback);\n  }\n\n  offAll(): void {\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\n    this._lifecycleEvents.off();\n  }\n\n  /**\n   * @internal\n   */\n  getObjectId(): string {\n    return this._objectId;\n  }\n\n  /**\n   * Emits the {@link LiveObjectSubscriptionEvent.updated} event with provided update object if it isn't a noop.\n   *\n   * @internal\n   */\n  notifyUpdated(update: TUpdate | LiveObjectUpdateNoop): void {\n    // should not emit update event if update was noop\n    if ((update as LiveObjectUpdateNoop).noop) {\n      return;\n    }\n\n    this._subscriptions.emit(LiveObjectSubscriptionEvent.updated, update);\n  }\n\n  /**\n   * Clears the object's data, cancels any buffered operations and sets the tombstone flag to `true`.\n   *\n   * @internal\n   */\n  tombstone(objectMessage: ObjectMessage): TUpdate {\n    this._tombstone = true;\n    if (objectMessage.serialTimestamp != null) {\n      this._tombstonedAt = objectMessage.serialTimestamp;\n    } else {\n      this._client.Logger.logAction(\n        this._client.logger,\n        this._client.Logger.LOG_MINOR,\n        'LiveObject.tombstone()',\n        `object has been tombstoned but no \"serialTimestamp\" found in the message, using local clock instead; objectId=${this.getObjectId()}`,\n      );\n      this._tombstonedAt = Date.now(); // best-effort estimate since no timestamp provided by the server\n    }\n    const update = this.clearData();\n    update.clientId = objectMessage.clientId;\n    update.connectionId = objectMessage.connectionId;\n    this._lifecycleEvents.emit(LiveObjectLifecycleEvent.deleted);\n\n    return update;\n  }\n\n  /**\n   * @internal\n   */\n  isTombstoned(): boolean {\n    return this._tombstone;\n  }\n\n  /**\n   * @internal\n   */\n  tombstonedAt(): number | undefined {\n    return this._tombstonedAt;\n  }\n\n  /**\n   * @internal\n   */\n  clearData(): TUpdate {\n    const previousDataRef = this._dataRef;\n    this._dataRef = this._getZeroValueData();\n    return this._updateFromDataDiff(previousDataRef, this._dataRef);\n  }\n\n  /**\n   * Returns true if the given serial indicates that the operation to which it belongs should be applied to the object.\n   *\n   * An operation should be applied if its serial is strictly greater than the serial in the `siteTimeserials` map for the same site.\n   * If `siteTimeserials` map does not contain a serial for the same site, the operation should be applied.\n   */\n  protected _canApplyOperation(opSerial: string | undefined, opSiteCode: string | undefined): boolean {\n    if (!opSerial) {\n      throw new this._client.ErrorInfo(`Invalid serial: ${opSerial}`, 92000, 500);\n    }\n\n    if (!opSiteCode) {\n      throw new this._client.ErrorInfo(`Invalid site code: ${opSiteCode}`, 92000, 500);\n    }\n\n    const siteSerial = this._siteTimeserials[opSiteCode];\n    return !siteSerial || opSerial > siteSerial;\n  }\n\n  protected _applyObjectDelete(objectMessage: ObjectMessage): TUpdate {\n    return this.tombstone(objectMessage);\n  }\n\n  /**\n   * Apply object operation message on this LiveObject.\n   *\n   * @internal\n   */\n  abstract applyOperation(op: ObjectOperation<ObjectData>, msg: ObjectMessage): void;\n  /**\n   * Overrides internal data for this LiveObject with object state from the given object message.\n   * Provided object state should hold a valid data for current LiveObject, e.g. counter data for LiveCounter, map data for LiveMap.\n   *\n   * Object states are received during sync sequence, and sync sequence is a source of truth for the current state of the objects,\n   * so we can use the data received from the sync sequence directly and override any data values or site serials this LiveObject has\n   * without the need to merge them.\n   *\n   * Returns an update object that describes the changes applied based on the object's previous value.\n   *\n   * @internal\n   */\n  abstract overrideWithObjectState(objectMessage: ObjectMessage): TUpdate | LiveObjectUpdateNoop;\n  /**\n   * @internal\n   */\n  abstract onGCInterval(): void;\n\n  protected abstract _getZeroValueData(): TData;\n  /**\n   * Calculate the update object based on the current LiveObject data and incoming new data.\n   */\n  protected abstract _updateFromDataDiff(prevDataRef: TData, newDataRef: TData): TUpdate;\n  /**\n   * Merges the initial data from the create operation into the LiveObject.\n   *\n   * Client SDKs do not need to keep around the object operation that created the object,\n   * so we can merge the initial data the first time we receive it for the object,\n   * and work with aggregated value after that.\n   *\n   * This saves us from needing to merge the initial value with operations applied to\n   * the object every time the object is read.\n   */\n  protected abstract _mergeInitialDataFromCreateOperation(\n    objectOperation: ObjectOperation<ObjectData>,\n    msg: ObjectMessage,\n  ): TUpdate;\n}\n", "import type BaseClient from 'common/lib/client/baseclient';\nimport type Platform from 'common/platform';\n\nexport type LiveObjectType = 'map' | 'counter';\n\n/**\n * Represents a parsed object id.\n *\n * @internal\n */\nexport class ObjectId {\n  private constructor(\n    readonly type: LiveObjectType,\n    readonly hash: string,\n    readonly msTimestamp: number,\n  ) {}\n\n  static fromInitialValue(\n    platform: typeof Platform,\n    objectType: LiveObjectType,\n    initialValue: string,\n    nonce: string,\n    msTimestamp: number,\n  ): ObjectId {\n    const valueForHashBuffer = platform.BufferUtils.concat([\n      platform.BufferUtils.utf8Encode(initialValue),\n      platform.BufferUtils.utf8Encode(':'),\n      platform.BufferUtils.utf8Encode(nonce),\n    ]);\n    const hashBuffer = platform.BufferUtils.sha256(valueForHashBuffer);\n    const hash = platform.BufferUtils.base64UrlEncode(hashBuffer);\n\n    return new ObjectId(objectType, hash, msTimestamp);\n  }\n\n  /**\n   * Create ObjectId instance from hashed object id string.\n   */\n  static fromString(client: BaseClient, objectId: string | null | undefined): ObjectId {\n    if (client.Utils.isNil(objectId)) {\n      throw new client.ErrorInfo('Invalid object id string', 92000, 500);\n    }\n\n    // RTO6b1\n    const [type, rest] = objectId.split(':');\n    if (!type || !rest) {\n      throw new client.ErrorInfo('Invalid object id string', 92000, 500);\n    }\n\n    if (!['map', 'counter'].includes(type)) {\n      throw new client.ErrorInfo(`Invalid object type in object id: ${objectId}`, 92000, 500);\n    }\n\n    const [hash, msTimestamp] = rest.split('@');\n    if (!hash || !msTimestamp) {\n      throw new client.ErrorInfo('Invalid object id string', 92000, 500);\n    }\n\n    if (!Number.isInteger(Number.parseInt(msTimestamp))) {\n      throw new client.ErrorInfo('Invalid object id string', 92000, 500);\n    }\n\n    return new ObjectId(type as LiveObjectType, hash, Number.parseInt(msTimestamp));\n  }\n\n  toString(): string {\n    return `${this.type}:${this.hash}@${this.msTimestamp}`;\n  }\n}\n", "import { LiveObject, LiveObjectData, LiveObjectUpdate, LiveObjectUpdateNoop } from './liveobject';\nimport { ObjectId } from './objectid';\nimport {\n  createInitialValueJSONString,\n  ObjectData,\n  ObjectMessage,\n  ObjectOperation,\n  ObjectOperationAction,\n  ObjectsCounterOp,\n} from './objectmessage';\nimport { Objects } from './objects';\n\nexport interface LiveCounterData extends LiveObjectData {\n  data: number; // RTLC3\n}\n\nexport interface LiveCounterUpdate extends LiveObjectUpdate {\n  update: { amount: number };\n}\n\n/** @spec RTLC1, RTLC2 */\nexport class LiveCounter extends LiveObject<LiveCounterData, LiveCounterUpdate> {\n  /**\n   * Returns a {@link LiveCounter} instance with a 0 value.\n   *\n   * @internal\n   * @spec RTLC4\n   */\n  static zeroValue(objects: Objects, objectId: string): LiveCounter {\n    return new LiveCounter(objects, objectId);\n  }\n\n  /**\n   * Returns a {@link LiveCounter} instance based on the provided object state.\n   * The provided object state must hold a valid counter object data.\n   *\n   * @internal\n   */\n  static fromObjectState(objects: Objects, objectMessage: ObjectMessage): LiveCounter {\n    const obj = new LiveCounter(objects, objectMessage.object!.objectId);\n    obj.overrideWithObjectState(objectMessage);\n    return obj;\n  }\n\n  /**\n   * Returns a {@link LiveCounter} instance based on the provided COUNTER_CREATE object operation.\n   * The provided object operation must hold a valid counter object data.\n   *\n   * @internal\n   */\n  static fromObjectOperation(objects: Objects, objectMessage: ObjectMessage): LiveCounter {\n    const obj = new LiveCounter(objects, objectMessage.operation!.objectId);\n    obj._mergeInitialDataFromCreateOperation(objectMessage.operation!, objectMessage);\n    return obj;\n  }\n\n  /**\n   * @internal\n   */\n  static createCounterIncMessage(objects: Objects, objectId: string, amount: number): ObjectMessage {\n    const client = objects.getClient();\n\n    if (typeof amount !== 'number' || !Number.isFinite(amount)) {\n      throw new client.ErrorInfo('Counter value increment should be a valid number', 40003, 400);\n    }\n\n    const msg = ObjectMessage.fromValues(\n      {\n        operation: {\n          action: ObjectOperationAction.COUNTER_INC,\n          objectId,\n          counterOp: { amount },\n        } as ObjectOperation<ObjectData>,\n      },\n      client.Utils,\n      client.MessageEncoding,\n    );\n\n    return msg;\n  }\n\n  /**\n   * @internal\n   */\n  static async createCounterCreateMessage(objects: Objects, count?: number): Promise<ObjectMessage> {\n    const client = objects.getClient();\n\n    if (count !== undefined && (typeof count !== 'number' || !Number.isFinite(count))) {\n      throw new client.ErrorInfo('Counter value should be a valid number', 40003, 400);\n    }\n\n    const initialValueOperation = LiveCounter.createInitialValueOperation(count);\n    const initialValueJSONString = createInitialValueJSONString(initialValueOperation, client);\n    const nonce = client.Utils.cheapRandStr();\n    const msTimestamp = await client.getTimestamp(true);\n\n    const objectId = ObjectId.fromInitialValue(\n      client.Platform,\n      'counter',\n      initialValueJSONString,\n      nonce,\n      msTimestamp,\n    ).toString();\n\n    const msg = ObjectMessage.fromValues(\n      {\n        operation: {\n          ...initialValueOperation,\n          action: ObjectOperationAction.COUNTER_CREATE,\n          objectId,\n          nonce,\n          initialValue: initialValueJSONString,\n        } as ObjectOperation<ObjectData>,\n      },\n      client.Utils,\n      client.MessageEncoding,\n    );\n\n    return msg;\n  }\n\n  /**\n   * @internal\n   */\n  static createInitialValueOperation(count?: number): Pick<ObjectOperation<ObjectData>, 'counter'> {\n    return {\n      counter: {\n        count: count ?? 0,\n      },\n    };\n  }\n\n  /** @spec RTLC5 */\n  value(): number {\n    this._objects.throwIfInvalidAccessApiConfiguration(); // RTLC5a, RTLC5b\n    return this._dataRef.data; // RTLC5c\n  }\n\n  /**\n   * Send a COUNTER_INC operation to the realtime system to increment a value on this LiveCounter object.\n   *\n   * This does not modify the underlying data of this LiveCounter object. Instead, the change will be applied when\n   * the published COUNTER_INC operation is echoed back to the client and applied to the object following the regular\n   * operation application procedure.\n   *\n   * @returns A promise which resolves upon receiving the ACK message for the published operation message.\n   */\n  async increment(amount: number): Promise<void> {\n    this._objects.throwIfInvalidWriteApiConfiguration();\n    const msg = LiveCounter.createCounterIncMessage(this._objects, this.getObjectId(), amount);\n    return this._objects.publish([msg]);\n  }\n\n  /**\n   * An alias for calling {@link LiveCounter.increment | LiveCounter.increment(-amount)}\n   */\n  async decrement(amount: number): Promise<void> {\n    this._objects.throwIfInvalidWriteApiConfiguration();\n    // do an explicit type safety check here before negating the amount value,\n    // so we don't unintentionally change the type sent by a user\n    if (typeof amount !== 'number' || !Number.isFinite(amount)) {\n      throw new this._client.ErrorInfo('Counter value decrement should be a valid number', 40003, 400);\n    }\n\n    return this.increment(-amount);\n  }\n\n  /**\n   * @internal\n   */\n  applyOperation(op: ObjectOperation<ObjectData>, msg: ObjectMessage): void {\n    if (op.objectId !== this.getObjectId()) {\n      throw new this._client.ErrorInfo(\n        `Cannot apply object operation with objectId=${op.objectId}, to this LiveCounter with objectId=${this.getObjectId()}`,\n        92000,\n        500,\n      );\n    }\n\n    const opSerial = msg.serial!;\n    const opSiteCode = msg.siteCode!;\n    if (!this._canApplyOperation(opSerial, opSiteCode)) {\n      this._client.Logger.logAction(\n        this._client.logger,\n        this._client.Logger.LOG_MICRO,\n        'LiveCounter.applyOperation()',\n        `skipping ${op.action} op: op serial ${opSerial.toString()} <= site serial ${this._siteTimeserials[opSiteCode]?.toString()}; objectId=${this.getObjectId()}`,\n      );\n      return;\n    }\n    // should update stored site serial immediately. doesn't matter if we successfully apply the op,\n    // as it's important to mark that the op was processed by the object\n    this._siteTimeserials[opSiteCode] = opSerial;\n\n    if (this.isTombstoned()) {\n      // this object is tombstoned so the operation cannot be applied\n      return;\n    }\n\n    let update: LiveCounterUpdate | LiveObjectUpdateNoop;\n    switch (op.action) {\n      case ObjectOperationAction.COUNTER_CREATE:\n        update = this._applyCounterCreate(op, msg);\n        break;\n\n      case ObjectOperationAction.COUNTER_INC:\n        if (this._client.Utils.isNil(op.counterOp)) {\n          this._throwNoPayloadError(op);\n          // leave an explicit return here, so that TS knows that update object is always set after the switch statement.\n          return;\n        } else {\n          update = this._applyCounterInc(op.counterOp, msg);\n        }\n        break;\n\n      case ObjectOperationAction.OBJECT_DELETE:\n        update = this._applyObjectDelete(msg);\n        break;\n\n      default:\n        throw new this._client.ErrorInfo(\n          `Invalid ${op.action} op for LiveCounter objectId=${this.getObjectId()}`,\n          92000,\n          500,\n        );\n    }\n\n    this.notifyUpdated(update);\n  }\n\n  /**\n   * @internal\n   * @spec RTLC6\n   */\n  overrideWithObjectState(objectMessage: ObjectMessage): LiveCounterUpdate | LiveObjectUpdateNoop {\n    const objectState = objectMessage.object;\n    if (objectState == null) {\n      throw new this._client.ErrorInfo(`Missing object state; LiveCounter objectId=${this.getObjectId()}`, 92000, 500);\n    }\n\n    if (objectState.objectId !== this.getObjectId()) {\n      throw new this._client.ErrorInfo(\n        `Invalid object state: object state objectId=${objectState.objectId}; LiveCounter objectId=${this.getObjectId()}`,\n        92000,\n        500,\n      );\n    }\n\n    if (!this._client.Utils.isNil(objectState.createOp)) {\n      // it is expected that create operation can be missing in the object state, so only validate it when it exists\n      if (objectState.createOp.objectId !== this.getObjectId()) {\n        throw new this._client.ErrorInfo(\n          `Invalid object state: object state createOp objectId=${objectState.createOp?.objectId}; LiveCounter objectId=${this.getObjectId()}`,\n          92000,\n          500,\n        );\n      }\n\n      if (objectState.createOp.action !== ObjectOperationAction.COUNTER_CREATE) {\n        throw new this._client.ErrorInfo(\n          `Invalid object state: object state createOp action=${objectState.createOp?.action}; LiveCounter objectId=${this.getObjectId()}`,\n          92000,\n          500,\n        );\n      }\n    }\n\n    // object's site serials are still updated even if it is tombstoned, so always use the site serials received from the operation.\n    // should default to empty map if site serials do not exist on the object state, so that any future operation may be applied to this object.\n    this._siteTimeserials = objectState.siteTimeserials ?? {}; // RTLC6a\n\n    if (this.isTombstoned()) {\n      // this object is tombstoned. this is a terminal state which can't be overridden. skip the rest of object state message processing\n      return { noop: true };\n    }\n\n    const previousDataRef = this._dataRef;\n    if (objectState.tombstone) {\n      // tombstone this object and ignore the data from the object state message\n      this.tombstone(objectMessage);\n    } else {\n      // override data for this object with data from the object state\n      this._createOperationIsMerged = false; // RTLC6b\n      this._dataRef = { data: objectState.counter?.count ?? 0 }; // RTLC6c\n      // RTLC6d\n      if (!this._client.Utils.isNil(objectState.createOp)) {\n        this._mergeInitialDataFromCreateOperation(objectState.createOp, objectMessage);\n      }\n    }\n\n    // if object got tombstoned, the update object will include all data that got cleared.\n    // otherwise it is a diff between previous value and new value from object state.\n    const update = this._updateFromDataDiff(previousDataRef, this._dataRef);\n    update.clientId = objectMessage.clientId;\n    update.connectionId = objectMessage.connectionId;\n    return update;\n  }\n\n  /**\n   * @internal\n   */\n  onGCInterval(): void {\n    // nothing to GC for a counter object\n    return;\n  }\n\n  /** @spec RTLC4 */\n  protected _getZeroValueData(): LiveCounterData {\n    return { data: 0 };\n  }\n\n  protected _updateFromDataDiff(prevDataRef: LiveCounterData, newDataRef: LiveCounterData): LiveCounterUpdate {\n    const counterDiff = newDataRef.data - prevDataRef.data;\n    return { update: { amount: counterDiff } };\n  }\n\n  protected _mergeInitialDataFromCreateOperation(\n    objectOperation: ObjectOperation<ObjectData>,\n    msg: ObjectMessage,\n  ): LiveCounterUpdate {\n    // if a counter object is missing for the COUNTER_CREATE op, the initial value is implicitly 0 in this case.\n    // note that it is intentional to SUM the incoming count from the create op.\n    // if we got here, it means that current counter instance is missing the initial value in its data reference,\n    // which we're going to add now.\n    this._dataRef.data += objectOperation.counter?.count ?? 0; // RTLC6d1\n    this._createOperationIsMerged = true; // RTLC6d2\n\n    return {\n      update: { amount: objectOperation.counter?.count ?? 0 },\n      clientId: msg.clientId,\n      connectionId: msg.connectionId,\n    };\n  }\n\n  private _throwNoPayloadError(op: ObjectOperation<ObjectData>): void {\n    throw new this._client.ErrorInfo(\n      `No payload found for ${op.action} op for LiveCounter objectId=${this.getObjectId()}`,\n      92000,\n      500,\n    );\n  }\n\n  private _applyCounterCreate(\n    op: ObjectOperation<ObjectData>,\n    msg: ObjectMessage,\n  ): LiveCounterUpdate | LiveObjectUpdateNoop {\n    if (this._createOperationIsMerged) {\n      // There can't be two different create operation for the same object id, because the object id\n      // fully encodes that operation. This means we can safely ignore any new incoming create operations\n      // if we already merged it once.\n      this._client.Logger.logAction(\n        this._client.logger,\n        this._client.Logger.LOG_MICRO,\n        'LiveCounter._applyCounterCreate()',\n        `skipping applying COUNTER_CREATE op on a counter instance as it was already applied before; objectId=${this.getObjectId()}`,\n      );\n      return { noop: true };\n    }\n\n    return this._mergeInitialDataFromCreateOperation(op, msg);\n  }\n\n  private _applyCounterInc(op: ObjectsCounterOp, msg: ObjectMessage): LiveCounterUpdate {\n    this._dataRef.data += op.amount;\n    return { update: { amount: op.amount }, clientId: msg.clientId, connectionId: msg.connectionId };\n  }\n}\n", "import type BaseClient from 'common/lib/client/baseclient';\nimport { BatchContext } from './batchcontext';\nimport { LiveCounter } from './livecounter';\nimport { Objects } from './objects';\n\nexport class BatchContextLiveCounter {\n  private _client: BaseClient;\n\n  constructor(\n    private _batchContext: BatchContext,\n    private _objects: Objects,\n    private _counter: LiveCounter,\n  ) {\n    this._client = this._objects.getClient();\n  }\n\n  value(): number {\n    this._objects.throwIfInvalidAccessApiConfiguration();\n    this._batchContext.throwIfClosed();\n    return this._counter.value();\n  }\n\n  increment(amount: number): void {\n    this._objects.throwIfInvalidWriteApiConfiguration();\n    this._batchContext.throwIfClosed();\n    const msg = LiveCounter.createCounterIncMessage(this._objects, this._counter.getObjectId(), amount);\n    this._batchContext.queueMessage(msg);\n  }\n\n  decrement(amount: number): void {\n    this._objects.throwIfInvalidWriteApiConfiguration();\n    this._batchContext.throwIfClosed();\n    // do an explicit type safety check here before negating the amount value,\n    // so we don't unintentionally change the type sent by a user\n    if (typeof amount !== 'number') {\n      throw new this._client.ErrorInfo('Counter value decrement should be a number', 40003, 400);\n    }\n\n    this.increment(-amount);\n  }\n}\n", "import { dequal } from 'dequal';\n\nimport type { Bufferlike } from 'common/platform';\nimport type * as API from '../../../ably';\nimport { LiveObject, LiveObjectData, LiveObjectUpdate, LiveObjectUpdateNoop } from './liveobject';\nimport { ObjectId } from './objectid';\nimport {\n  createInitialValueJSONString,\n  ObjectData,\n  ObjectMessage,\n  ObjectOperation,\n  ObjectOperationAction,\n  ObjectsMapEntry,\n  ObjectsMapOp,\n  ObjectsMapSemantics,\n  PrimitiveObjectValue,\n} from './objectmessage';\nimport { Objects } from './objects';\n\nexport interface ObjectIdObjectData {\n  /** A reference to another object, used to support composable object structures. */\n  objectId: string;\n}\n\nexport interface ValueObjectData {\n  /** A decoded leaf value from {@link WireObjectData}. */\n  value: string | number | boolean | Bufferlike | API.JsonArray | API.JsonObject;\n}\n\nexport type LiveMapObjectData = ObjectIdObjectData | ValueObjectData;\n\nexport interface LiveMapEntry {\n  tombstone: boolean;\n  tombstonedAt: number | undefined;\n  timeserial: string | undefined;\n  data: LiveMapObjectData | undefined;\n}\n\nexport interface LiveMapData extends LiveObjectData {\n  data: Map<string, LiveMapEntry>; // RTLM3\n}\n\nexport interface LiveMapUpdate<T extends API.LiveMapType> extends LiveObjectUpdate {\n  update: { [keyName in keyof T & string]?: 'updated' | 'removed' };\n}\n\n/** @spec RTLM1, RTLM2 */\nexport class LiveMap<T extends API.LiveMapType> extends LiveObject<LiveMapData, LiveMapUpdate<T>> {\n  constructor(\n    objects: Objects,\n    private _semantics: ObjectsMapSemantics,\n    objectId: string,\n  ) {\n    super(objects, objectId);\n  }\n\n  /**\n   * Returns a {@link LiveMap} instance with an empty map data.\n   *\n   * @internal\n   * @spec RTLM4\n   */\n  static zeroValue<T extends API.LiveMapType>(objects: Objects, objectId: string): LiveMap<T> {\n    return new LiveMap<T>(objects, ObjectsMapSemantics.LWW, objectId);\n  }\n\n  /**\n   * Returns a {@link LiveMap} instance based on the provided object state.\n   * The provided object state must hold a valid map object data.\n   *\n   * @internal\n   */\n  static fromObjectState<T extends API.LiveMapType>(objects: Objects, objectMessage: ObjectMessage): LiveMap<T> {\n    const obj = new LiveMap<T>(objects, objectMessage.object!.map!.semantics!, objectMessage.object!.objectId);\n    obj.overrideWithObjectState(objectMessage);\n    return obj;\n  }\n\n  /**\n   * Returns a {@link LiveMap} instance based on the provided MAP_CREATE object operation.\n   * The provided object operation must hold a valid map object data.\n   *\n   * @internal\n   */\n  static fromObjectOperation<T extends API.LiveMapType>(objects: Objects, objectMessage: ObjectMessage): LiveMap<T> {\n    const obj = new LiveMap<T>(objects, objectMessage.operation!.map?.semantics!, objectMessage.operation!.objectId);\n    obj._mergeInitialDataFromCreateOperation(objectMessage.operation!, objectMessage);\n    return obj;\n  }\n\n  /**\n   * @internal\n   */\n  static createMapSetMessage<TKey extends keyof API.LiveMapType & string>(\n    objects: Objects,\n    objectId: string,\n    key: TKey,\n    value: API.LiveMapType[TKey],\n  ): ObjectMessage {\n    const client = objects.getClient();\n\n    LiveMap.validateKeyValue(objects, key, value);\n\n    let objectData: LiveMapObjectData;\n    if (value instanceof LiveObject) {\n      const typedObjectData: ObjectIdObjectData = { objectId: value.getObjectId() };\n      objectData = typedObjectData;\n    } else {\n      const typedObjectData: ValueObjectData = { value: value as PrimitiveObjectValue };\n      objectData = typedObjectData;\n    }\n\n    const msg = ObjectMessage.fromValues(\n      {\n        operation: {\n          action: ObjectOperationAction.MAP_SET,\n          objectId,\n          mapOp: {\n            key,\n            data: objectData,\n          },\n        } as ObjectOperation<ObjectData>,\n      },\n      client.Utils,\n      client.MessageEncoding,\n    );\n\n    return msg;\n  }\n\n  /**\n   * @internal\n   */\n  static createMapRemoveMessage<TKey extends keyof API.LiveMapType & string>(\n    objects: Objects,\n    objectId: string,\n    key: TKey,\n  ): ObjectMessage {\n    const client = objects.getClient();\n\n    if (typeof key !== 'string') {\n      throw new client.ErrorInfo('Map key should be string', 40003, 400);\n    }\n\n    const msg = ObjectMessage.fromValues(\n      {\n        operation: {\n          action: ObjectOperationAction.MAP_REMOVE,\n          objectId,\n          mapOp: { key },\n        } as ObjectOperation<ObjectData>,\n      },\n      client.Utils,\n      client.MessageEncoding,\n    );\n\n    return msg;\n  }\n\n  /**\n   * @internal\n   */\n  static validateKeyValue<TKey extends keyof API.LiveMapType & string>(\n    objects: Objects,\n    key: TKey,\n    value: API.LiveMapType[TKey],\n  ): void {\n    const client = objects.getClient();\n\n    if (typeof key !== 'string') {\n      throw new client.ErrorInfo('Map key should be string', 40003, 400);\n    }\n\n    if (\n      value === null ||\n      (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'object')\n    ) {\n      throw new client.ErrorInfo('Map value data type is unsupported', 40013, 400); // OD4a\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static async createMapCreateMessage(objects: Objects, entries?: API.LiveMapType): Promise<ObjectMessage> {\n    const client = objects.getClient();\n\n    if (entries !== undefined && (entries === null || typeof entries !== 'object')) {\n      throw new client.ErrorInfo('Map entries should be a key-value object', 40003, 400);\n    }\n\n    Object.entries(entries ?? {}).forEach(([key, value]) => LiveMap.validateKeyValue(objects, key, value));\n\n    const initialValueOperation = LiveMap.createInitialValueOperation(entries);\n    const initialValueJSONString = createInitialValueJSONString(initialValueOperation, client);\n    const nonce = client.Utils.cheapRandStr();\n    const msTimestamp = await client.getTimestamp(true);\n\n    const objectId = ObjectId.fromInitialValue(\n      client.Platform,\n      'map',\n      initialValueJSONString,\n      nonce,\n      msTimestamp,\n    ).toString();\n\n    const msg = ObjectMessage.fromValues(\n      {\n        operation: {\n          ...initialValueOperation,\n          action: ObjectOperationAction.MAP_CREATE,\n          objectId,\n          nonce,\n          initialValue: initialValueJSONString,\n        } as ObjectOperation<ObjectData>,\n      },\n      client.Utils,\n      client.MessageEncoding,\n    );\n\n    return msg;\n  }\n\n  /**\n   * @internal\n   */\n  static createInitialValueOperation(entries?: API.LiveMapType): Pick<ObjectOperation<ObjectData>, 'map'> {\n    const mapEntries: Record<string, ObjectsMapEntry<ObjectData>> = {};\n\n    Object.entries(entries ?? {}).forEach(([key, value]) => {\n      let objectData: LiveMapObjectData;\n      if (value instanceof LiveObject) {\n        const typedObjectData: ObjectIdObjectData = { objectId: value.getObjectId() };\n        objectData = typedObjectData;\n      } else {\n        const typedObjectData: ValueObjectData = { value: value as PrimitiveObjectValue };\n        objectData = typedObjectData;\n      }\n\n      mapEntries[key] = {\n        data: objectData,\n      };\n    });\n\n    return {\n      map: {\n        semantics: ObjectsMapSemantics.LWW,\n        entries: mapEntries,\n      },\n    };\n  }\n\n  /**\n   * Returns the value associated with the specified key in the underlying Map object.\n   *\n   * - If this map object is tombstoned (deleted), `undefined` is returned.\n   * - If no entry is associated with the specified key, `undefined` is returned.\n   * - If map entry is tombstoned (deleted), `undefined` is returned.\n   * - If the value associated with the provided key is an objectId string of another LiveObject, a reference to that LiveObject\n   * is returned, provided it exists in the local pool and is not tombstoned. Otherwise, `undefined` is returned.\n   * - If the value is not an objectId, then that value is returned.\n   *\n   * @spec RTLM5, RTLM5a\n   */\n  // force the key to be of type string as we only allow strings as key in a map\n  get<TKey extends keyof T & string>(key: TKey): T[TKey] | undefined {\n    this._objects.throwIfInvalidAccessApiConfiguration(); // RTLM5b, RTLM5c\n\n    if (this.isTombstoned()) {\n      return undefined as T[TKey];\n    }\n\n    const element = this._dataRef.data.get(key);\n\n    // RTLM5d1\n    if (element === undefined) {\n      return undefined as T[TKey];\n    }\n\n    // RTLM5d2a\n    if (element.tombstone === true) {\n      return undefined as T[TKey];\n    }\n\n    // data always exists for non-tombstoned elements\n    return this._getResolvedValueFromObjectData(element.data!) as T[TKey];\n  }\n\n  size(): number {\n    this._objects.throwIfInvalidAccessApiConfiguration();\n\n    let size = 0;\n    for (const value of this._dataRef.data.values()) {\n      if (this._isMapEntryTombstoned(value)) {\n        // should not count tombstoned entries\n        continue;\n      }\n\n      size++;\n    }\n\n    return size;\n  }\n\n  *entries<TKey extends keyof T & string>(): IterableIterator<[TKey, T[TKey]]> {\n    this._objects.throwIfInvalidAccessApiConfiguration();\n\n    for (const [key, entry] of this._dataRef.data.entries()) {\n      if (this._isMapEntryTombstoned(entry)) {\n        // do not return tombstoned entries\n        continue;\n      }\n\n      // data always exists for non-tombstoned elements\n      const value = this._getResolvedValueFromObjectData(entry.data!) as T[TKey];\n      yield [key as TKey, value];\n    }\n  }\n\n  *keys<TKey extends keyof T & string>(): IterableIterator<TKey> {\n    for (const [key] of this.entries<TKey>()) {\n      yield key;\n    }\n  }\n\n  *values<TKey extends keyof T & string>(): IterableIterator<T[TKey]> {\n    for (const [_, value] of this.entries<TKey>()) {\n      yield value;\n    }\n  }\n\n  /**\n   * Send a MAP_SET operation to the realtime system to set a key on this LiveMap object to a specified value.\n   *\n   * This does not modify the underlying data of this LiveMap object. Instead, the change will be applied when\n   * the published MAP_SET operation is echoed back to the client and applied to the object following the regular\n   * operation application procedure.\n   *\n   * @returns A promise which resolves upon receiving the ACK message for the published operation message.\n   */\n  async set<TKey extends keyof T & string>(key: TKey, value: T[TKey]): Promise<void> {\n    this._objects.throwIfInvalidWriteApiConfiguration();\n    const msg = LiveMap.createMapSetMessage(this._objects, this.getObjectId(), key, value);\n    return this._objects.publish([msg]);\n  }\n\n  /**\n   * Send a MAP_REMOVE operation to the realtime system to tombstone a key on this LiveMap object.\n   *\n   * This does not modify the underlying data of this LiveMap object. Instead, the change will be applied when\n   * the published MAP_REMOVE operation is echoed back to the client and applied to the object following the regular\n   * operation application procedure.\n   *\n   * @returns A promise which resolves upon receiving the ACK message for the published operation message.\n   */\n  async remove<TKey extends keyof T & string>(key: TKey): Promise<void> {\n    this._objects.throwIfInvalidWriteApiConfiguration();\n    const msg = LiveMap.createMapRemoveMessage(this._objects, this.getObjectId(), key);\n    return this._objects.publish([msg]);\n  }\n\n  /**\n   * @internal\n   */\n  applyOperation(op: ObjectOperation<ObjectData>, msg: ObjectMessage): void {\n    if (op.objectId !== this.getObjectId()) {\n      throw new this._client.ErrorInfo(\n        `Cannot apply object operation with objectId=${op.objectId}, to this LiveMap with objectId=${this.getObjectId()}`,\n        92000,\n        500,\n      );\n    }\n\n    const opSerial = msg.serial!;\n    const opSiteCode = msg.siteCode!;\n    if (!this._canApplyOperation(opSerial, opSiteCode)) {\n      this._client.Logger.logAction(\n        this._client.logger,\n        this._client.Logger.LOG_MICRO,\n        'LiveMap.applyOperation()',\n        `skipping ${op.action} op: op serial ${opSerial.toString()} <= site serial ${this._siteTimeserials[opSiteCode]?.toString()}; objectId=${this.getObjectId()}`,\n      );\n      return;\n    }\n    // should update stored site serial immediately. doesn't matter if we successfully apply the op,\n    // as it's important to mark that the op was processed by the object\n    this._siteTimeserials[opSiteCode] = opSerial;\n\n    if (this.isTombstoned()) {\n      // this object is tombstoned so the operation cannot be applied\n      return;\n    }\n\n    let update: LiveMapUpdate<T> | LiveObjectUpdateNoop;\n    switch (op.action) {\n      case ObjectOperationAction.MAP_CREATE:\n        update = this._applyMapCreate(op, msg);\n        break;\n\n      case ObjectOperationAction.MAP_SET:\n        if (this._client.Utils.isNil(op.mapOp)) {\n          this._throwNoPayloadError(op);\n          // leave an explicit return here, so that TS knows that update object is always set after the switch statement.\n          return;\n        } else {\n          update = this._applyMapSet(op.mapOp, opSerial, msg);\n        }\n        break;\n\n      case ObjectOperationAction.MAP_REMOVE:\n        if (this._client.Utils.isNil(op.mapOp)) {\n          this._throwNoPayloadError(op);\n          // leave an explicit return here, so that TS knows that update object is always set after the switch statement.\n          return;\n        } else {\n          update = this._applyMapRemove(op.mapOp, opSerial, msg.serialTimestamp, msg);\n        }\n        break;\n\n      case ObjectOperationAction.OBJECT_DELETE:\n        update = this._applyObjectDelete(msg);\n        break;\n\n      default:\n        throw new this._client.ErrorInfo(\n          `Invalid ${op.action} op for LiveMap objectId=${this.getObjectId()}`,\n          92000,\n          500,\n        );\n    }\n\n    this.notifyUpdated(update);\n  }\n\n  /**\n   * @internal\n   * @spec RTLM6\n   */\n  overrideWithObjectState(objectMessage: ObjectMessage): LiveMapUpdate<T> | LiveObjectUpdateNoop {\n    const objectState = objectMessage.object;\n    if (objectState == null) {\n      throw new this._client.ErrorInfo(`Missing object state; LiveMap objectId=${this.getObjectId()}`, 92000, 500);\n    }\n\n    if (objectState.objectId !== this.getObjectId()) {\n      throw new this._client.ErrorInfo(\n        `Invalid object state: object state objectId=${objectState.objectId}; LiveMap objectId=${this.getObjectId()}`,\n        92000,\n        500,\n      );\n    }\n\n    if (objectState.map?.semantics !== this._semantics) {\n      throw new this._client.ErrorInfo(\n        `Invalid object state: object state map semantics=${objectState.map?.semantics}; LiveMap semantics=${this._semantics}`,\n        92000,\n        500,\n      );\n    }\n\n    if (!this._client.Utils.isNil(objectState.createOp)) {\n      // it is expected that create operation can be missing in the object state, so only validate it when it exists\n      if (objectState.createOp.objectId !== this.getObjectId()) {\n        throw new this._client.ErrorInfo(\n          `Invalid object state: object state createOp objectId=${objectState.createOp?.objectId}; LiveMap objectId=${this.getObjectId()}`,\n          92000,\n          500,\n        );\n      }\n\n      if (objectState.createOp.action !== ObjectOperationAction.MAP_CREATE) {\n        throw new this._client.ErrorInfo(\n          `Invalid object state: object state createOp action=${objectState.createOp?.action}; LiveMap objectId=${this.getObjectId()}`,\n          92000,\n          500,\n        );\n      }\n\n      if (objectState.createOp.map?.semantics !== this._semantics) {\n        throw new this._client.ErrorInfo(\n          `Invalid object state: object state createOp map semantics=${objectState.createOp.map?.semantics}; LiveMap semantics=${this._semantics}`,\n          92000,\n          500,\n        );\n      }\n    }\n\n    // object's site serials are still updated even if it is tombstoned, so always use the site serials received from the op.\n    // should default to empty map if site serials do not exist on the object state, so that any future operation may be applied to this object.\n    this._siteTimeserials = objectState.siteTimeserials ?? {}; // RTLM6a\n\n    if (this.isTombstoned()) {\n      // this object is tombstoned. this is a terminal state which can't be overridden. skip the rest of object state message processing\n      return { noop: true };\n    }\n\n    const previousDataRef = this._dataRef;\n    if (objectState.tombstone) {\n      // tombstone this object and ignore the data from the object state message\n      this.tombstone(objectMessage);\n    } else {\n      // override data for this object with data from the object state\n      this._createOperationIsMerged = false; // RTLM6b\n      this._dataRef = this._liveMapDataFromMapEntries(objectState.map?.entries ?? {}); // RTLM6c\n      // RTLM6d\n      if (!this._client.Utils.isNil(objectState.createOp)) {\n        this._mergeInitialDataFromCreateOperation(objectState.createOp, objectMessage);\n      }\n    }\n\n    // if object got tombstoned, the update object will include all data that got cleared.\n    // otherwise it is a diff between previous value and new value from object state.\n    const update = this._updateFromDataDiff(previousDataRef, this._dataRef);\n    update.clientId = objectMessage.clientId;\n    update.connectionId = objectMessage.connectionId;\n    return update;\n  }\n\n  /**\n   * @internal\n   */\n  onGCInterval(): void {\n    // should remove any tombstoned entries from the underlying map data that have exceeded the GC grace period\n\n    const keysToDelete: string[] = [];\n    for (const [key, value] of this._dataRef.data.entries()) {\n      if (value.tombstone === true && Date.now() - value.tombstonedAt! >= this._objects.gcGracePeriod) {\n        keysToDelete.push(key);\n      }\n    }\n\n    keysToDelete.forEach((x) => this._dataRef.data.delete(x));\n  }\n\n  /** @spec RTLM4 */\n  protected _getZeroValueData(): LiveMapData {\n    return { data: new Map<string, LiveMapEntry>() };\n  }\n\n  protected _updateFromDataDiff(prevDataRef: LiveMapData, newDataRef: LiveMapData): LiveMapUpdate<T> {\n    const update: LiveMapUpdate<T> = { update: {} };\n\n    for (const [key, currentEntry] of prevDataRef.data.entries()) {\n      const typedKey: keyof T & string = key;\n      // any non-tombstoned properties that exist on a current map, but not in the new data - got removed\n      if (currentEntry.tombstone === false && !newDataRef.data.has(typedKey)) {\n        update.update[typedKey] = 'removed';\n      }\n    }\n\n    for (const [key, newEntry] of newDataRef.data.entries()) {\n      const typedKey: keyof T & string = key;\n      if (!prevDataRef.data.has(typedKey)) {\n        // if property does not exist in the current map, but new data has it as a non-tombstoned property - got updated\n        if (newEntry.tombstone === false) {\n          update.update[typedKey] = 'updated';\n          continue;\n        }\n\n        // otherwise, if new data has this prop tombstoned - do nothing, as property didn't exist anyway\n        if (newEntry.tombstone === true) {\n          continue;\n        }\n      }\n\n      // properties that exist both in current and new map data need to have their values compared to decide on the update type\n      const currentEntry = prevDataRef.data.get(typedKey)!;\n\n      // compare tombstones first\n      if (currentEntry.tombstone === true && newEntry.tombstone === false) {\n        // current prop is tombstoned, but new is not. it means prop was updated to a meaningful value\n        update.update[typedKey] = 'updated';\n        continue;\n      }\n      if (currentEntry.tombstone === false && newEntry.tombstone === true) {\n        // current prop is not tombstoned, but new is. it means prop was removed\n        update.update[typedKey] = 'removed';\n        continue;\n      }\n      if (currentEntry.tombstone === true && newEntry.tombstone === true) {\n        // both props are tombstoned - treat as noop, as there is no data to compare.\n        continue;\n      }\n\n      // both props exist and are not tombstoned, need to compare values with deep equals to see if it was changed\n      const valueChanged = !dequal(currentEntry.data, newEntry.data);\n      if (valueChanged) {\n        update.update[typedKey] = 'updated';\n        continue;\n      }\n    }\n\n    return update;\n  }\n\n  protected _mergeInitialDataFromCreateOperation(\n    objectOperation: ObjectOperation<ObjectData>,\n    msg: ObjectMessage,\n  ): LiveMapUpdate<T> {\n    if (this._client.Utils.isNil(objectOperation.map)) {\n      // if a map object is missing for the MAP_CREATE op, the initial value is implicitly an empty map.\n      // in this case there is nothing to merge into the current map, so we can just end processing the op.\n      return { update: {}, clientId: msg.clientId, connectionId: msg.connectionId };\n    }\n\n    const aggregatedUpdate: LiveMapUpdate<T> = { update: {}, clientId: msg.clientId, connectionId: msg.connectionId };\n    // RTLM6d1\n    // in order to apply MAP_CREATE op for an existing map, we should merge their underlying entries keys.\n    // we can do this by iterating over entries from MAP_CREATE op and apply changes on per-key basis as if we had MAP_SET, MAP_REMOVE operations.\n    Object.entries(objectOperation.map.entries ?? {}).forEach(([key, entry]) => {\n      // for a MAP_CREATE operation we must use the serial value available on an entry, instead of a serial on a message\n      const opSerial = entry.timeserial;\n      let update: LiveMapUpdate<T> | LiveObjectUpdateNoop;\n      if (entry.tombstone === true) {\n        // RTLM6d1b - entry in MAP_CREATE op is removed, try to apply MAP_REMOVE op\n        update = this._applyMapRemove({ key }, opSerial, entry.serialTimestamp, msg);\n      } else {\n        // RTLM6d1a - entry in MAP_CREATE op is not removed, try to set it via MAP_SET op\n        update = this._applyMapSet({ key, data: entry.data }, opSerial, msg);\n      }\n\n      // skip noop updates\n      if ((update as LiveObjectUpdateNoop).noop) {\n        return;\n      }\n\n      // otherwise copy update data to aggregated update\n      Object.assign(aggregatedUpdate.update, update.update);\n    });\n\n    this._createOperationIsMerged = true; // RTLM6d2\n\n    return aggregatedUpdate;\n  }\n\n  private _throwNoPayloadError(op: ObjectOperation<ObjectData>): void {\n    throw new this._client.ErrorInfo(\n      `No payload found for ${op.action} op for LiveMap objectId=${this.getObjectId()}`,\n      92000,\n      500,\n    );\n  }\n\n  private _applyMapCreate(\n    op: ObjectOperation<ObjectData>,\n    msg: ObjectMessage,\n  ): LiveMapUpdate<T> | LiveObjectUpdateNoop {\n    if (this._createOperationIsMerged) {\n      // There can't be two different create operation for the same object id, because the object id\n      // fully encodes that operation. This means we can safely ignore any new incoming create operations\n      // if we already merged it once.\n      this._client.Logger.logAction(\n        this._client.logger,\n        this._client.Logger.LOG_MICRO,\n        'LiveMap._applyMapCreate()',\n        `skipping applying MAP_CREATE op on a map instance as it was already applied before; objectId=${this.getObjectId()}`,\n      );\n      return { noop: true };\n    }\n\n    if (this._semantics !== op.map?.semantics) {\n      throw new this._client.ErrorInfo(\n        `Cannot apply MAP_CREATE op on LiveMap objectId=${this.getObjectId()}; map's semantics=${this._semantics}, but op expected ${op.map?.semantics}`,\n        92000,\n        500,\n      );\n    }\n\n    return this._mergeInitialDataFromCreateOperation(op, msg);\n  }\n\n  /** @spec RTLM7 */\n  private _applyMapSet(\n    op: ObjectsMapOp<ObjectData>,\n    opSerial: string | undefined,\n    msg: ObjectMessage,\n  ): LiveMapUpdate<T> | LiveObjectUpdateNoop {\n    const { ErrorInfo, Utils } = this._client;\n\n    const existingEntry = this._dataRef.data.get(op.key);\n    // RTLM7a\n    if (existingEntry && !this._canApplyMapOperation(existingEntry.timeserial, opSerial)) {\n      // RTLM7a1 - the operation's serial <= the entry's serial, ignore the operation.\n      this._client.Logger.logAction(\n        this._client.logger,\n        this._client.Logger.LOG_MICRO,\n        'LiveMap._applyMapSet()',\n        `skipping update for key=\"${op.key}\": op serial ${opSerial?.toString()} <= entry serial ${existingEntry.timeserial?.toString()}; objectId=${this.getObjectId()}`,\n      );\n      return { noop: true };\n    }\n\n    if (Utils.isNil(op.data) || (Utils.isNil(op.data.objectId) && Utils.isNil(op.data.value))) {\n      throw new ErrorInfo(\n        `Invalid object data for MAP_SET op on objectId=${this.getObjectId()} on key=\"${op.key}\"`,\n        92000,\n        500,\n      );\n    }\n\n    let liveData: LiveMapObjectData;\n    // RTLM7c\n    if (!Utils.isNil(op.data.objectId)) {\n      liveData = { objectId: op.data.objectId } as ObjectIdObjectData;\n      // this MAP_SET op is setting a key to point to another object via its object id,\n      // but it is possible that we don't have the corresponding object in the pool yet (for example, we haven't seen the *_CREATE op for it).\n      // we don't want to return undefined from this map's .get() method even if we don't have the object,\n      // so instead we create a zero-value object for that object id if it not exists.\n      this._objects.getPool().createZeroValueObjectIfNotExists(op.data.objectId); // RTLM7c1\n    } else {\n      liveData = { value: op.data.value } as ValueObjectData;\n    }\n\n    if (existingEntry) {\n      // RTLM7a2\n      existingEntry.tombstone = false; // RTLM7a2c\n      existingEntry.tombstonedAt = undefined;\n      existingEntry.timeserial = opSerial; // RTLM7a2b\n      existingEntry.data = liveData; // RTLM7a2a\n    } else {\n      // RTLM7b, RTLM7b1\n      const newEntry: LiveMapEntry = {\n        tombstone: false, // RTLM7b2\n        tombstonedAt: undefined,\n        timeserial: opSerial,\n        data: liveData,\n      };\n      this._dataRef.data.set(op.key, newEntry);\n    }\n\n    const update: LiveMapUpdate<T> = { update: {}, clientId: msg.clientId, connectionId: msg.connectionId };\n    const typedKey: keyof T & string = op.key;\n    update.update[typedKey] = 'updated';\n\n    return update;\n  }\n\n  /** @spec RTLM8 */\n  private _applyMapRemove(\n    op: ObjectsMapOp<ObjectData>,\n    opSerial: string | undefined,\n    opTimestamp: number | undefined,\n    msg: ObjectMessage,\n  ): LiveMapUpdate<T> | LiveObjectUpdateNoop {\n    const existingEntry = this._dataRef.data.get(op.key);\n    // RTLM8a\n    if (existingEntry && !this._canApplyMapOperation(existingEntry.timeserial, opSerial)) {\n      // RTLM8a1 - the operation's serial <= the entry's serial, ignore the operation.\n      this._client.Logger.logAction(\n        this._client.logger,\n        this._client.Logger.LOG_MICRO,\n        'LiveMap._applyMapRemove()',\n        `skipping remove for key=\"${op.key}\": op serial ${opSerial?.toString()} <= entry serial ${existingEntry.timeserial?.toString()}; objectId=${this.getObjectId()}`,\n      );\n      return { noop: true };\n    }\n\n    let tombstonedAt: number;\n    if (opTimestamp != null) {\n      tombstonedAt = opTimestamp;\n    } else {\n      this._client.Logger.logAction(\n        this._client.logger,\n        this._client.Logger.LOG_MINOR,\n        'LiveMap._applyMapRemove()',\n        `map key has been removed but no \"serialTimestamp\" found in the message, using local clock instead; key=\"${op.key}\", objectId=${this.getObjectId()}`,\n      );\n      tombstonedAt = Date.now(); // best-effort estimate since no timestamp provided by the server\n    }\n\n    if (existingEntry) {\n      // RTLM8a2\n      existingEntry.tombstone = true; // RTLM8a2c\n      existingEntry.tombstonedAt = tombstonedAt;\n      existingEntry.timeserial = opSerial; // RTLM8a2b\n      existingEntry.data = undefined; // RTLM8a2a\n    } else {\n      // RTLM8b, RTLM8b1\n      const newEntry: LiveMapEntry = {\n        tombstone: true, // RTLM8b2\n        tombstonedAt: tombstonedAt,\n        timeserial: opSerial,\n        data: undefined,\n      };\n      this._dataRef.data.set(op.key, newEntry);\n    }\n\n    const update: LiveMapUpdate<T> = { update: {}, clientId: msg.clientId, connectionId: msg.connectionId };\n    const typedKey: keyof T & string = op.key;\n    update.update[typedKey] = 'removed';\n\n    return update;\n  }\n\n  /**\n   * Returns true if the serials of the given operation and entry indicate that\n   * the operation should be applied to the entry, following the CRDT semantics of this LiveMap.\n   * @spec RTLM9\n   */\n  private _canApplyMapOperation(mapEntrySerial: string | undefined, opSerial: string | undefined): boolean {\n    // for LWW CRDT semantics (the only supported LiveMap semantic) an operation\n    // should only be applied if its serial is strictly greater (\"after\") than an entry's serial.\n\n    if (!mapEntrySerial && !opSerial) {\n      // RTLM9b - if both serials are nullish or empty strings, we treat them as the \"earliest possible\" serials,\n      // in which case they are \"equal\", so the operation should not be applied\n      return false;\n    }\n\n    if (!mapEntrySerial) {\n      // RTLM9d - any operation serial is greater than non-existing entry serial\n      return true;\n    }\n\n    if (!opSerial) {\n      // RTLM9c - non-existing operation serial is lower than any entry serial\n      return false;\n    }\n\n    // RTLM9e - if both serials exist, compare them lexicographically\n    return opSerial > mapEntrySerial;\n  }\n\n  private _liveMapDataFromMapEntries(entries: Record<string, ObjectsMapEntry<ObjectData>>): LiveMapData {\n    const liveMapData: LiveMapData = {\n      data: new Map<string, LiveMapEntry>(),\n    };\n\n    // need to iterate over entries to correctly process optional parameters\n    Object.entries(entries ?? {}).forEach(([key, entry]) => {\n      let liveData: LiveMapObjectData | undefined = undefined;\n\n      if (!this._client.Utils.isNil(entry.data)) {\n        if (!this._client.Utils.isNil(entry.data.objectId)) {\n          liveData = { objectId: entry.data.objectId } as ObjectIdObjectData;\n        } else {\n          liveData = { value: entry.data.value } as ValueObjectData;\n        }\n      }\n\n      let tombstonedAt: number | undefined;\n      if (entry.tombstone === true) {\n        if (entry.serialTimestamp != null) {\n          tombstonedAt = entry.serialTimestamp;\n        } else {\n          this._client.Logger.logAction(\n            this._client.logger,\n            this._client.Logger.LOG_MINOR,\n            'LiveMap._liveMapDataFromMapEntries()',\n            `map key is removed but no \"serialTimestamp\" found, using local clock instead; key=\"${key}\", objectId=${this.getObjectId()}`,\n          );\n          tombstonedAt = Date.now(); // best-effort estimate since no timestamp provided by the server\n        }\n      }\n\n      const liveDataEntry: LiveMapEntry = {\n        timeserial: entry.timeserial,\n        data: liveData,\n        // consider object as tombstoned only if we received an explicit flag stating that. otherwise it exists\n        tombstone: entry.tombstone === true,\n        tombstonedAt,\n      };\n\n      liveMapData.data.set(key, liveDataEntry);\n    });\n\n    return liveMapData;\n  }\n\n  /**\n   * Returns value as is if object data stores a primitive type, or a reference to another LiveObject from the pool if it stores an objectId.\n   */\n  private _getResolvedValueFromObjectData(data: LiveMapObjectData): PrimitiveObjectValue | LiveObject | undefined {\n    // if object data stores primitive value, just return it as is.\n    const primitiveValue = (data as ValueObjectData).value;\n    if (primitiveValue != null) {\n      return primitiveValue; // RTLM5d2b, RTLM5d2c, RTLM5d2d, RTLM5d2e\n    }\n\n    // RTLM5d2f - otherwise, it has an objectId reference, and we should get the actual object from the pool\n    const objectId = (data as ObjectIdObjectData).objectId;\n    const refObject: LiveObject | undefined = this._objects.getPool().get(objectId);\n    if (!refObject) {\n      return undefined; // RTLM5d2f1\n    }\n\n    if (refObject.isTombstoned()) {\n      // tombstoned objects must not be surfaced to the end users\n      return undefined;\n    }\n\n    return refObject; // RTLM5d2f2\n  }\n\n  private _isMapEntryTombstoned(entry: LiveMapEntry): boolean {\n    if (entry.tombstone === true) {\n      return true;\n    }\n\n    // data always exists for non-tombstoned entries\n    const data = entry.data!;\n    if ('objectId' in data) {\n      const refObject = this._objects.getPool().get(data.objectId);\n\n      if (refObject?.isTombstoned()) {\n        // entry that points to tombstoned object should be considered tombstoned as well\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n", "import type * as API from '../../../ably';\nimport { BatchContext } from './batchcontext';\nimport { LiveMap } from './livemap';\nimport { LiveObject } from './liveobject';\nimport { Objects } from './objects';\n\nexport class BatchContextLiveMap<T extends API.LiveMapType> {\n  constructor(\n    private _batchContext: BatchContext,\n    private _objects: Objects,\n    private _map: LiveMap<T>,\n  ) {}\n\n  get<TKey extends keyof T & string>(key: TKey): T[TKey] | undefined {\n    this._objects.throwIfInvalidAccessApiConfiguration();\n    this._batchContext.throwIfClosed();\n    const value = this._map.get(key);\n    if (value instanceof LiveObject) {\n      return this._batchContext.getWrappedObject(value.getObjectId()) as T[TKey];\n    } else {\n      return value;\n    }\n  }\n\n  size(): number {\n    this._objects.throwIfInvalidAccessApiConfiguration();\n    this._batchContext.throwIfClosed();\n    return this._map.size();\n  }\n\n  *entries<TKey extends keyof T & string>(): IterableIterator<[TKey, T[TKey]]> {\n    this._objects.throwIfInvalidAccessApiConfiguration();\n    this._batchContext.throwIfClosed();\n    yield* this._map.entries();\n  }\n\n  *keys<TKey extends keyof T & string>(): IterableIterator<TKey> {\n    this._objects.throwIfInvalidAccessApiConfiguration();\n    this._batchContext.throwIfClosed();\n    yield* this._map.keys();\n  }\n\n  *values<TKey extends keyof T & string>(): IterableIterator<T[TKey]> {\n    this._objects.throwIfInvalidAccessApiConfiguration();\n    this._batchContext.throwIfClosed();\n    yield* this._map.values();\n  }\n\n  set<TKey extends keyof T & string>(key: TKey, value: T[TKey]): void {\n    this._objects.throwIfInvalidWriteApiConfiguration();\n    this._batchContext.throwIfClosed();\n    const msg = LiveMap.createMapSetMessage(this._objects, this._map.getObjectId(), key, value);\n    this._batchContext.queueMessage(msg);\n  }\n\n  remove<TKey extends keyof T & string>(key: TKey): void {\n    this._objects.throwIfInvalidWriteApiConfiguration();\n    this._batchContext.throwIfClosed();\n    const msg = LiveMap.createMapRemoveMessage(this._objects, this._map.getObjectId(), key);\n    this._batchContext.queueMessage(msg);\n  }\n}\n", "export const DEFAULTS = {\n  gcInterval: 1000 * 60 * 5, // 5 minutes\n  /**\n   * The SDK will attempt to use the `objectsGCGracePeriod` value provided by the server in the `connectionDetails` object of the `CONNECTED` event.\n   * If the server does not provide this value, the SDK will fall back to this default value.\n   *\n   * Must be > 2 minutes to ensure we keep tombstones long enough to avoid the possibility of receiving an operation\n   * with an earlier serial that would not have been applied if the tombstone still existed.\n   *\n   * Applies both for map entries tombstones and object tombstones.\n   */\n  gcGracePeriod: 1000 * 60 * 60 * 24, // 24 hours\n};\n", "import type BaseClient from 'common/lib/client/baseclient';\nimport { DEFAULTS } from './defaults';\nimport { LiveCounter } from './livecounter';\nimport { LiveMap } from './livemap';\nimport { LiveObject } from './liveobject';\nimport { ObjectId } from './objectid';\nimport { Objects } from './objects';\n\nexport const ROOT_OBJECT_ID = 'root';\n\n/**\n * @internal\n * @spec RTO3\n */\nexport class ObjectsPool {\n  private _client: BaseClient;\n  private _pool: Map<string, LiveObject>; // RTO3a\n  private _gcInterval: ReturnType<typeof setInterval>;\n\n  constructor(private _objects: Objects) {\n    this._client = this._objects.getClient();\n    this._pool = this._createInitialPool();\n    this._gcInterval = setInterval(() => {\n      this._onGCInterval();\n    }, DEFAULTS.gcInterval);\n    // call nodejs's Timeout.unref to not require Node.js event loop to remain active due to this interval. see https://nodejs.org/api/timers.html#timeoutunref\n    this._gcInterval.unref?.();\n  }\n\n  get(objectId: string): LiveObject | undefined {\n    return this._pool.get(objectId);\n  }\n\n  /**\n   * Deletes objects from the pool for which object ids are not found in the provided array of ids.\n   */\n  deleteExtraObjectIds(objectIds: string[]): void {\n    const poolObjectIds = [...this._pool.keys()];\n    const extraObjectIds = poolObjectIds.filter((x) => !objectIds.includes(x));\n\n    extraObjectIds.forEach((x) => this._pool.delete(x));\n  }\n\n  set(objectId: string, liveObject: LiveObject): void {\n    this._pool.set(objectId, liveObject);\n  }\n\n  /**\n   * Removes all objects but root from the pool and clears the data for root.\n   * Does not create a new root object, so the reference to the root object remains the same.\n   */\n  resetToInitialPool(emitUpdateEvents: boolean): void {\n    // clear the pool first and keep the root object\n    const root = this._pool.get(ROOT_OBJECT_ID)!;\n    this._pool.clear();\n    this._pool.set(root.getObjectId(), root);\n\n    // clear the data, this will only clear the root object\n    this.clearObjectsData(emitUpdateEvents);\n  }\n\n  /**\n   * Clears the data stored for all objects in the pool.\n   */\n  clearObjectsData(emitUpdateEvents: boolean): void {\n    for (const object of this._pool.values()) {\n      const update = object.clearData();\n      if (emitUpdateEvents) {\n        object.notifyUpdated(update);\n      }\n    }\n  }\n\n  /** @spec RTO6 */\n  createZeroValueObjectIfNotExists(objectId: string): LiveObject {\n    const existingObject = this.get(objectId);\n    if (existingObject) {\n      return existingObject; // RTO6a\n    }\n\n    const parsedObjectId = ObjectId.fromString(this._client, objectId); // RTO6b\n    let zeroValueObject: LiveObject;\n    switch (parsedObjectId.type) {\n      case 'map': {\n        zeroValueObject = LiveMap.zeroValue(this._objects, objectId); // RTO6b2\n        break;\n      }\n\n      case 'counter':\n        zeroValueObject = LiveCounter.zeroValue(this._objects, objectId); // RTO6b3\n        break;\n    }\n\n    this.set(objectId, zeroValueObject);\n    return zeroValueObject;\n  }\n\n  private _createInitialPool(): Map<string, LiveObject> {\n    const pool = new Map<string, LiveObject>();\n    // RTO3b\n    const root = LiveMap.zeroValue(this._objects, ROOT_OBJECT_ID);\n    pool.set(root.getObjectId(), root);\n    return pool;\n  }\n\n  private _onGCInterval(): void {\n    const toDelete: string[] = [];\n    for (const [objectId, obj] of this._pool.entries()) {\n      // tombstoned objects should be removed from the pool if they have been tombstoned for longer than grace period.\n      // by removing them from the local pool, Objects plugin no longer keeps a reference to those objects, allowing JS's\n      // Garbage Collection to eventually free the memory for those objects, provided the user no longer references them either.\n      if (obj.isTombstoned() && Date.now() - obj.tombstonedAt()! >= this._objects.gcGracePeriod) {\n        toDelete.push(objectId);\n        continue;\n      }\n\n      obj.onGCInterval();\n    }\n\n    toDelete.forEach((x) => this._pool.delete(x));\n  }\n}\n", "import type BaseClient from 'common/lib/client/baseclient';\nimport type * as API from '../../../ably';\nimport { BatchContextLiveCounter } from './batchcontextlivecounter';\nimport { BatchContextLiveMap } from './batchcontextlivemap';\nimport { LiveCounter } from './livecounter';\nimport { LiveMap } from './livemap';\nimport { ObjectMessage } from './objectmessage';\nimport { Objects } from './objects';\nimport { ROOT_OBJECT_ID } from './objectspool';\n\nexport class BatchContext {\n  private _client: BaseClient;\n  /** Maps object ids to the corresponding batch context object wrappers  */\n  private _wrappedObjects: Map<string, BatchContextLiveCounter | BatchContextLiveMap<API.LiveMapType>> = new Map();\n  private _queuedMessages: ObjectMessage[] = [];\n  private _isClosed = false;\n\n  constructor(\n    private _objects: Objects,\n    private _root: LiveMap<API.LiveMapType>,\n  ) {\n    this._client = _objects.getClient();\n    this._wrappedObjects.set(this._root.getObjectId(), new BatchContextLiveMap(this, this._objects, this._root));\n  }\n\n  getRoot<T extends API.LiveMapType = API.DefaultRoot>(): BatchContextLiveMap<T> {\n    this._objects.throwIfInvalidAccessApiConfiguration();\n    this.throwIfClosed();\n    return this.getWrappedObject(ROOT_OBJECT_ID) as BatchContextLiveMap<T>;\n  }\n\n  /**\n   * @internal\n   */\n  getWrappedObject(objectId: string): BatchContextLiveCounter | BatchContextLiveMap<API.LiveMapType> | undefined {\n    if (this._wrappedObjects.has(objectId)) {\n      return this._wrappedObjects.get(objectId);\n    }\n\n    const originObject = this._objects.getPool().get(objectId);\n    if (!originObject) {\n      return undefined;\n    }\n\n    let wrappedObject: BatchContextLiveCounter | BatchContextLiveMap<API.LiveMapType>;\n    if (originObject instanceof LiveMap) {\n      wrappedObject = new BatchContextLiveMap(this, this._objects, originObject);\n    } else if (originObject instanceof LiveCounter) {\n      wrappedObject = new BatchContextLiveCounter(this, this._objects, originObject);\n    } else {\n      throw new this._client.ErrorInfo(\n        `Unknown LiveObject instance type: objectId=${originObject.getObjectId()}`,\n        50000,\n        500,\n      );\n    }\n\n    this._wrappedObjects.set(objectId, wrappedObject);\n    return wrappedObject;\n  }\n\n  /**\n   * @internal\n   */\n  throwIfClosed(): void {\n    if (this.isClosed()) {\n      throw new this._client.ErrorInfo('Batch is closed', 40000, 400);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  isClosed(): boolean {\n    return this._isClosed;\n  }\n\n  /**\n   * @internal\n   */\n  close(): void {\n    this._isClosed = true;\n  }\n\n  /**\n   * @internal\n   */\n  queueMessage(msg: ObjectMessage): void {\n    this._queuedMessages.push(msg);\n  }\n\n  /**\n   * @internal\n   */\n  async flush(): Promise<void> {\n    try {\n      this.close();\n\n      if (this._queuedMessages.length > 0) {\n        await this._objects.publish(this._queuedMessages);\n      }\n    } finally {\n      this._wrappedObjects.clear();\n      this._queuedMessages = [];\n    }\n  }\n}\n", "import type BaseClient from 'common/lib/client/baseclient';\nimport type RealtimeChannel from 'common/lib/client/realtimechannel';\nimport { ObjectMessage } from './objectmessage';\nimport { Objects } from './objects';\n\nexport interface LiveObjectDataEntry {\n  objectMessage: ObjectMessage;\n  objectType: 'LiveMap' | 'LiveCounter';\n}\n\nexport interface LiveCounterDataEntry extends LiveObjectDataEntry {\n  objectType: 'LiveCounter';\n}\n\nexport interface LiveMapDataEntry extends LiveObjectDataEntry {\n  objectType: 'LiveMap';\n}\n\nexport type AnyDataEntry = LiveCounterDataEntry | LiveMapDataEntry;\n\n// TODO: investigate if this class is still needed after changes with createOp. objects are now initialized from the stateObject and this class does minimal processing\n/**\n * @internal\n */\nexport class SyncObjectsDataPool {\n  private _client: BaseClient;\n  private _channel: RealtimeChannel;\n  private _pool: Map<string, AnyDataEntry>;\n\n  constructor(private _objects: Objects) {\n    this._client = this._objects.getClient();\n    this._channel = this._objects.getChannel();\n    this._pool = new Map<string, AnyDataEntry>();\n  }\n\n  entries() {\n    return this._pool.entries();\n  }\n\n  size(): number {\n    return this._pool.size;\n  }\n\n  isEmpty(): boolean {\n    return this._pool.size === 0;\n  }\n\n  clear(): void {\n    this._pool.clear();\n  }\n\n  applyObjectSyncMessages(objectMessages: ObjectMessage[]): void {\n    for (const objectMessage of objectMessages) {\n      if (!objectMessage.object) {\n        this._client.Logger.logAction(\n          this._client.logger,\n          this._client.Logger.LOG_MAJOR,\n          'SyncObjectsDataPool.applyObjectSyncMessages()',\n          `object message is received during OBJECT_SYNC without 'object' field, skipping message; message id: ${objectMessage.id}, channel: ${this._channel.name}`,\n        );\n        continue;\n      }\n\n      const objectState = objectMessage.object;\n\n      if (objectState.counter) {\n        this._pool.set(objectState.objectId, this._createLiveCounterDataEntry(objectMessage));\n      } else if (objectState.map) {\n        this._pool.set(objectState.objectId, this._createLiveMapDataEntry(objectMessage));\n      } else {\n        this._client.Logger.logAction(\n          this._client.logger,\n          this._client.Logger.LOG_MAJOR,\n          'SyncObjectsDataPool.applyObjectSyncMessages()',\n          `received unsupported object state message during OBJECT_SYNC, expected 'counter' or 'map' to be present, skipping message; message id: ${objectMessage.id}, channel: ${this._channel.name}`,\n        );\n      }\n    }\n  }\n\n  private _createLiveCounterDataEntry(objectMessage: ObjectMessage): LiveCounterDataEntry {\n    const newEntry: LiveCounterDataEntry = {\n      objectMessage,\n      objectType: 'LiveCounter',\n    };\n\n    return newEntry;\n  }\n\n  private _createLiveMapDataEntry(objectMessage: ObjectMessage): LiveMapDataEntry {\n    const newEntry: LiveMapDataEntry = {\n      objectMessage,\n      objectType: 'LiveMap',\n    };\n\n    return newEntry;\n  }\n}\n", "import type BaseClient from 'common/lib/client/baseclient';\nimport type RealtimeChannel from 'common/lib/client/realtimechannel';\nimport type EventEmitter from 'common/lib/util/eventemitter';\nimport type * as API from '../../../ably';\nimport { BatchContext } from './batchcontext';\nimport { DEFAULTS } from './defaults';\nimport { LiveCounter } from './livecounter';\nimport { LiveMap } from './livemap';\nimport { LiveObject, LiveObjectUpdate, LiveObjectUpdateNoop } from './liveobject';\nimport { ObjectMessage, ObjectOperationAction } from './objectmessage';\nimport { ObjectsPool, ROOT_OBJECT_ID } from './objectspool';\nimport { SyncObjectsDataPool } from './syncobjectsdatapool';\n\nexport enum ObjectsEvent {\n  syncing = 'syncing',\n  synced = 'synced',\n}\n\nexport enum ObjectsState {\n  initialized = 'initialized',\n  syncing = 'syncing',\n  synced = 'synced',\n}\n\nconst StateToEventsMap: Record<ObjectsState, ObjectsEvent | undefined> = {\n  initialized: undefined,\n  syncing: ObjectsEvent.syncing,\n  synced: ObjectsEvent.synced,\n};\n\nexport type ObjectsEventCallback = () => void;\n\nexport interface OnObjectsEventResponse {\n  off(): void;\n}\n\nexport type BatchCallback = (batchContext: BatchContext) => void;\n\nexport class Objects {\n  gcGracePeriod: number;\n\n  private _client: BaseClient;\n  private _channel: RealtimeChannel;\n  private _state: ObjectsState;\n  // composition over inheritance since we cannot import class directly into plugin code.\n  // instead we obtain a class type from the client\n  private _eventEmitterInternal: EventEmitter;\n  // related to RTC10, should have a separate EventEmitter for users of the library\n  private _eventEmitterPublic: EventEmitter;\n  private _objectsPool: ObjectsPool; // RTO3\n  private _syncObjectsDataPool: SyncObjectsDataPool;\n  private _currentSyncId: string | undefined;\n  private _currentSyncCursor: string | undefined;\n  private _bufferedObjectOperations: ObjectMessage[];\n\n  // Used by tests\n  static _DEFAULTS = DEFAULTS;\n\n  constructor(channel: RealtimeChannel) {\n    this._channel = channel;\n    this._client = channel.client;\n    this._state = ObjectsState.initialized;\n    this._eventEmitterInternal = new this._client.EventEmitter(this._client.logger);\n    this._eventEmitterPublic = new this._client.EventEmitter(this._client.logger);\n    this._objectsPool = new ObjectsPool(this);\n    this._syncObjectsDataPool = new SyncObjectsDataPool(this);\n    this._bufferedObjectOperations = [];\n    // use server-provided objectsGCGracePeriod if available, and subscribe to new connectionDetails that can be emitted as part of the RTN24\n    this.gcGracePeriod =\n      this._channel.connectionManager.connectionDetails?.objectsGCGracePeriod ?? DEFAULTS.gcGracePeriod;\n    this._channel.connectionManager.on('connectiondetails', (details: Record<string, any>) => {\n      this.gcGracePeriod = details.objectsGCGracePeriod ?? DEFAULTS.gcGracePeriod;\n    });\n  }\n\n  /**\n   * When called without a type variable, we return a default root type which is based on globally defined interface for Objects feature.\n   * A user can provide an explicit type for the getRoot method to explicitly set the type structure on this particular channel.\n   * This is useful when working with multiple channels with different underlying data structure.\n   * @spec RTO1\n   */\n  async getRoot<T extends API.LiveMapType = API.DefaultRoot>(): Promise<LiveMap<T>> {\n    this.throwIfInvalidAccessApiConfiguration(); // RTO1a, RTO1b\n\n    // if we're not synced yet, wait for sync sequence to finish before returning root\n    if (this._state !== ObjectsState.synced) {\n      await this._eventEmitterInternal.once(ObjectsEvent.synced); // RTO1c\n    }\n\n    return this._objectsPool.get(ROOT_OBJECT_ID) as LiveMap<T>; // RTO1d\n  }\n\n  /**\n   * Provides access to the synchronous write API for Objects that can be used to batch multiple operations together in a single channel message.\n   */\n  async batch(callback: BatchCallback): Promise<void> {\n    this.throwIfInvalidWriteApiConfiguration();\n\n    const root = await this.getRoot();\n    const context = new BatchContext(this, root);\n\n    try {\n      callback(context);\n      await context.flush();\n    } finally {\n      context.close();\n    }\n  }\n\n  /**\n   * Send a MAP_CREATE operation to the realtime system to create a new map object in the pool.\n   *\n   * Once the ACK message is received, the method returns the object from the local pool if it got created due to\n   * the echoed MAP_CREATE operation, or if it wasn't received yet, the method creates a new object locally using the provided data and returns it.\n   *\n   * @returns A promise which resolves upon receiving the ACK message for the published operation message. A promise is resolved with an object containing provided data.\n   */\n  async createMap<T extends API.LiveMapType>(entries?: T): Promise<LiveMap<T>> {\n    this.throwIfInvalidWriteApiConfiguration();\n\n    const msg = await LiveMap.createMapCreateMessage(this, entries);\n    const objectId = msg.operation?.objectId!;\n\n    await this.publish([msg]);\n\n    // we may have already received the MAP_CREATE operation at this point, as it could arrive before the ACK for our publish message.\n    // this means the object might already exist in the local pool, having been added during the usual MAP_CREATE operation process.\n    // here we check if the object is present, and return it if found; otherwise, create a new object on the client side.\n    if (this._objectsPool.get(objectId)) {\n      return this._objectsPool.get(objectId) as LiveMap<T>;\n    }\n\n    // we haven't received the MAP_CREATE operation yet, so we can create a new map object using the locally constructed object operation.\n    // we don't know the serials for map entries, so we assign an \"earliest possible\" serial to each entry, so that any subsequent operation can be applied to them.\n    // we mark the MAP_CREATE operation as merged for the object, guaranteeing its idempotency and preventing it from being applied again when the operation arrives.\n    const map = LiveMap.fromObjectOperation<T>(this, msg);\n    this._objectsPool.set(objectId, map);\n\n    return map;\n  }\n\n  /**\n   * Send a COUNTER_CREATE operation to the realtime system to create a new counter object in the pool.\n   *\n   * Once the ACK message is received, the method returns the object from the local pool if it got created due to\n   * the echoed COUNTER_CREATE operation, or if it wasn't received yet, the method creates a new object locally using the provided data and returns it.\n   *\n   * @returns A promise which resolves upon receiving the ACK message for the published operation message. A promise is resolved with an object containing provided data.\n   */\n  async createCounter(count?: number): Promise<LiveCounter> {\n    this.throwIfInvalidWriteApiConfiguration();\n\n    const msg = await LiveCounter.createCounterCreateMessage(this, count);\n    const objectId = msg.operation?.objectId!;\n\n    await this.publish([msg]);\n\n    // we may have already received the COUNTER_CREATE operation at this point, as it could arrive before the ACK for our publish message.\n    // this means the object might already exist in the local pool, having been added during the usual COUNTER_CREATE operation process.\n    // here we check if the object is present, and return it if found; otherwise, create a new object on the client side.\n    if (this._objectsPool.get(objectId)) {\n      return this._objectsPool.get(objectId) as LiveCounter;\n    }\n\n    // we haven't received the COUNTER_CREATE operation yet, so we can create a new counter object using the locally constructed object operation.\n    // we mark the COUNTER_CREATE operation as merged for the object, guaranteeing its idempotency. this ensures we don't double count the initial counter value when the operation arrives.\n    const counter = LiveCounter.fromObjectOperation(this, msg);\n    this._objectsPool.set(objectId, counter);\n\n    return counter;\n  }\n\n  on(event: ObjectsEvent, callback: ObjectsEventCallback): OnObjectsEventResponse {\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\n    this._eventEmitterPublic.on(event, callback);\n\n    const off = () => {\n      this._eventEmitterPublic.off(event, callback);\n    };\n\n    return { off };\n  }\n\n  off(event: ObjectsEvent, callback: ObjectsEventCallback): void {\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\n\n    // prevent accidentally calling .off without any arguments on an EventEmitter and removing all callbacks\n    if (this._client.Utils.isNil(event) && this._client.Utils.isNil(callback)) {\n      return;\n    }\n\n    this._eventEmitterPublic.off(event, callback);\n  }\n\n  offAll(): void {\n    // this public API method can be called without specific configuration, so checking for invalid settings is unnecessary.\n    this._eventEmitterPublic.off();\n  }\n\n  /**\n   * @internal\n   */\n  getPool(): ObjectsPool {\n    return this._objectsPool;\n  }\n\n  /**\n   * @internal\n   */\n  getChannel(): RealtimeChannel {\n    return this._channel;\n  }\n\n  /**\n   * @internal\n   */\n  getClient(): BaseClient {\n    return this._client;\n  }\n\n  /**\n   * @internal\n   * @spec RTO5\n   */\n  handleObjectSyncMessages(objectMessages: ObjectMessage[], syncChannelSerial: string | null | undefined): void {\n    const { syncId, syncCursor } = this._parseSyncChannelSerial(syncChannelSerial); // RTO5a\n    const newSyncSequence = this._currentSyncId !== syncId;\n    if (newSyncSequence) {\n      // RTO5a2 - new sync sequence started\n      this._startNewSync(syncId, syncCursor); // RTO5a2a\n    }\n\n    // RTO5a3 - continue current sync sequence\n    this._syncObjectsDataPool.applyObjectSyncMessages(objectMessages); // RTO5b\n\n    // RTO5a4 - if this is the last (or only) message in a sequence of sync updates, end the sync\n    if (!syncCursor) {\n      // defer the state change event until the next tick if this was a new sync sequence\n      // to allow any event listeners to process the start of the new sequence event that was emitted earlier during this event loop.\n      this._endSync(newSyncSequence);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  handleObjectMessages(objectMessages: ObjectMessage[]): void {\n    if (this._state !== ObjectsState.synced) {\n      // The client receives object messages in realtime over the channel concurrently with the sync sequence.\n      // Some of the incoming object messages may have already been applied to the objects described in\n      // the sync sequence, but others may not; therefore we must buffer these messages so that we can apply\n      // them to the objects once the sync is complete.\n      this._bufferedObjectOperations.push(...objectMessages);\n      return;\n    }\n\n    this._applyObjectMessages(objectMessages);\n  }\n\n  /**\n   * @internal\n   * @spec RTO4\n   */\n  onAttached(hasObjects?: boolean): void {\n    this._client.Logger.logAction(\n      this._client.logger,\n      this._client.Logger.LOG_MINOR,\n      'Objects.onAttached()',\n      `channel=${this._channel.name}, hasObjects=${hasObjects}`,\n    );\n\n    // RTO4a\n    const fromInitializedState = this._state === ObjectsState.initialized;\n    if (hasObjects || fromInitializedState) {\n      // should always start a new sync sequence if we're in the initialized state, no matter the HAS_OBJECTS flag value.\n      // this guarantees we emit both \"syncing\" -> \"synced\" events in that order.\n      this._startNewSync();\n    }\n\n    // RTO4b\n    if (!hasObjects) {\n      // if no HAS_OBJECTS flag received on attach, we can end sync sequence immediately and treat it as no objects on a channel.\n      // reset the objects pool to its initial state, and emit update events so subscribers to root object get notified about changes.\n      this._objectsPool.resetToInitialPool(true); // RTO4b1, RTO4b2\n      this._syncObjectsDataPool.clear(); // RTO4b3\n      // defer the state change event until the next tick if we started a new sequence just now due to being in initialized state.\n      // this allows any event listeners to process the start of the new sequence event that was emitted earlier during this event loop.\n      this._endSync(fromInitializedState); // RTO4b4\n    }\n  }\n\n  /**\n   * @internal\n   */\n  actOnChannelState(state: API.ChannelState, hasObjects?: boolean): void {\n    switch (state) {\n      case 'attached':\n        this.onAttached(hasObjects);\n        break;\n\n      case 'detached':\n      case 'failed':\n        // do not emit data update events as the actual current state of Objects data is unknown when we're in these channel states\n        this._objectsPool.clearObjectsData(false);\n        this._syncObjectsDataPool.clear();\n        break;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async publish(objectMessages: ObjectMessage[]): Promise<void> {\n    this._channel.throwIfUnpublishableState();\n\n    const encodedMsgs = objectMessages.map((x) => x.encode(this._client));\n    const maxMessageSize = this._client.options.maxMessageSize;\n    const size = encodedMsgs.reduce((acc, msg) => acc + msg.getMessageSize(), 0);\n    if (size > maxMessageSize) {\n      throw new this._client.ErrorInfo(\n        `Maximum size of object messages that can be published at once exceeded (was ${size} bytes; limit is ${maxMessageSize} bytes)`,\n        40009,\n        400,\n      );\n    }\n\n    return this._channel.sendState(encodedMsgs);\n  }\n\n  /**\n   * @internal\n   */\n  throwIfInvalidAccessApiConfiguration(): void {\n    this._throwIfMissingChannelMode('object_subscribe');\n    this._throwIfInChannelState(['detached', 'failed']);\n  }\n\n  /**\n   * @internal\n   */\n  throwIfInvalidWriteApiConfiguration(): void {\n    this._throwIfMissingChannelMode('object_publish');\n    this._throwIfInChannelState(['detached', 'failed', 'suspended']);\n    this._throwIfEchoMessagesDisabled();\n  }\n\n  private _startNewSync(syncId?: string, syncCursor?: string): void {\n    // need to discard all buffered object operation messages on new sync start\n    this._bufferedObjectOperations = [];\n    this._syncObjectsDataPool.clear();\n    this._currentSyncId = syncId;\n    this._currentSyncCursor = syncCursor;\n    this._stateChange(ObjectsState.syncing, false);\n  }\n\n  /** @spec RTO5c */\n  private _endSync(deferStateEvent: boolean): void {\n    this._applySync();\n    // should apply buffered object operations after we applied the sync.\n    // can use regular object messages application logic\n    this._applyObjectMessages(this._bufferedObjectOperations);\n\n    this._bufferedObjectOperations = [];\n    this._syncObjectsDataPool.clear(); // RTO5c4\n    this._currentSyncId = undefined; // RTO5c3\n    this._currentSyncCursor = undefined; // RTO5c3\n    this._stateChange(ObjectsState.synced, deferStateEvent);\n  }\n\n  private _parseSyncChannelSerial(syncChannelSerial: string | null | undefined): {\n    syncId: string | undefined;\n    syncCursor: string | undefined;\n  } {\n    let match: RegExpMatchArray | null;\n    let syncId: string | undefined = undefined;\n    let syncCursor: string | undefined = undefined;\n    // RTO5a1 - syncChannelSerial is a two-part identifier: <sequence id>:<cursor value>\n    if (syncChannelSerial && (match = syncChannelSerial.match(/^([\\w-]+):(.*)$/))) {\n      syncId = match[1];\n      syncCursor = match[2];\n    }\n\n    return {\n      syncId,\n      syncCursor,\n    };\n  }\n\n  private _applySync(): void {\n    if (this._syncObjectsDataPool.isEmpty()) {\n      return;\n    }\n\n    const receivedObjectIds = new Set<string>();\n    const existingObjectUpdates: { object: LiveObject; update: LiveObjectUpdate | LiveObjectUpdateNoop }[] = [];\n\n    // RTO5c1\n    for (const [objectId, entry] of this._syncObjectsDataPool.entries()) {\n      receivedObjectIds.add(objectId);\n      const existingObject = this._objectsPool.get(objectId);\n\n      // RTO5c1a\n      if (existingObject) {\n        const update = existingObject.overrideWithObjectState(entry.objectMessage); // RTO5c1a1\n        // store updates to call subscription callbacks for all of them once the sync sequence is completed.\n        // this will ensure that clients get notified about the changes only once everything has been applied.\n        existingObjectUpdates.push({ object: existingObject, update });\n        continue;\n      }\n\n      // RTO5c1b,\n      let newObject: LiveObject;\n      // assign to a variable so TS doesn't complain about 'never' type in the default case\n      const objectType = entry.objectType;\n      switch (objectType) {\n        case 'LiveCounter':\n          newObject = LiveCounter.fromObjectState(this, entry.objectMessage); // RTO5c1b1a\n          break;\n\n        case 'LiveMap':\n          newObject = LiveMap.fromObjectState(this, entry.objectMessage); // RTO5c1b1b\n          break;\n\n        default:\n          throw new this._client.ErrorInfo(`Unknown LiveObject type: ${objectType}`, 50000, 500); // RTO5c1b1c\n      }\n\n      this._objectsPool.set(objectId, newObject); // RTO5c1b1\n    }\n\n    // RTO5c2 - need to remove LiveObject instances from the ObjectsPool for which objectIds were not received during the sync sequence\n    this._objectsPool.deleteExtraObjectIds([...receivedObjectIds]);\n\n    // call subscription callbacks for all updated existing objects\n    existingObjectUpdates.forEach(({ object, update }) => object.notifyUpdated(update));\n  }\n\n  private _applyObjectMessages(objectMessages: ObjectMessage[]): void {\n    for (const objectMessage of objectMessages) {\n      if (!objectMessage.operation) {\n        this._client.Logger.logAction(\n          this._client.logger,\n          this._client.Logger.LOG_MAJOR,\n          'Objects._applyObjectMessages()',\n          `object operation message is received without 'operation' field, skipping message; message id: ${objectMessage.id}, channel: ${this._channel.name}`,\n        );\n        continue;\n      }\n\n      const objectOperation = objectMessage.operation;\n\n      switch (objectOperation.action) {\n        case ObjectOperationAction.MAP_CREATE:\n        case ObjectOperationAction.COUNTER_CREATE:\n        case ObjectOperationAction.MAP_SET:\n        case ObjectOperationAction.MAP_REMOVE:\n        case ObjectOperationAction.COUNTER_INC:\n        case ObjectOperationAction.OBJECT_DELETE:\n          // we can receive an op for an object id we don't have yet in the pool. instead of buffering such operations,\n          // we can create a zero-value object for the provided object id and apply the operation to that zero-value object.\n          // this also means that all objects are capable of applying the corresponding *_CREATE ops on themselves,\n          // since they need to be able to eventually initialize themselves from that *_CREATE op.\n          // so to simplify operations handling, we always try to create a zero-value object in the pool first,\n          // and then we can always apply the operation on the existing object in the pool.\n          this._objectsPool.createZeroValueObjectIfNotExists(objectOperation.objectId);\n          this._objectsPool.get(objectOperation.objectId)!.applyOperation(objectOperation, objectMessage);\n          break;\n\n        default:\n          this._client.Logger.logAction(\n            this._client.logger,\n            this._client.Logger.LOG_MAJOR,\n            'Objects._applyObjectMessages()',\n            `received unsupported action in object operation message: ${objectOperation.action}, skipping message; message id: ${objectMessage.id}, channel: ${this._channel.name}`,\n          );\n      }\n    }\n  }\n\n  /** @spec RTO2 */\n  private _throwIfMissingChannelMode(expectedMode: 'object_subscribe' | 'object_publish'): void {\n    // RTO2a - channel.modes is only populated on channel attachment, so use it only if it is set\n    if (this._channel.modes != null && !this._channel.modes.includes(expectedMode)) {\n      throw new this._client.ErrorInfo(`\"${expectedMode}\" channel mode must be set for this operation`, 40024, 400); // RTO2a2\n    }\n    // RTO2b - otherwise as a best effort use user provided channel options\n    if (!this._client.Utils.allToLowerCase(this._channel.channelOptions.modes ?? []).includes(expectedMode)) {\n      throw new this._client.ErrorInfo(`\"${expectedMode}\" channel mode must be set for this operation`, 40024, 400); // RTO2b2\n    }\n  }\n\n  private _stateChange(state: ObjectsState, deferEvent: boolean): void {\n    if (this._state === state) {\n      return;\n    }\n\n    this._state = state;\n    const event = StateToEventsMap[state];\n    if (!event) {\n      return;\n    }\n\n    if (deferEvent) {\n      this._client.Platform.Config.nextTick(() => {\n        this._eventEmitterInternal.emit(event);\n        this._eventEmitterPublic.emit(event);\n      });\n    } else {\n      this._eventEmitterInternal.emit(event);\n      this._eventEmitterPublic.emit(event);\n    }\n  }\n\n  private _throwIfInChannelState(channelState: API.ChannelState[]): void {\n    if (channelState.includes(this._channel.state)) {\n      throw this._client.ErrorInfo.fromValues(this._channel.invalidStateError());\n    }\n  }\n\n  private _throwIfEchoMessagesDisabled(): void {\n    if (this._channel.client.options.echoMessages === false) {\n      throw new this._channel.client.ErrorInfo(\n        `\"echoMessages\" client option must be enabled for this operation`,\n        40000,\n        400,\n      );\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["_a", "_a"]
}
